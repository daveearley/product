// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testQuestions(t *testing.T) {
	t.Parallel()

	query := Questions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testQuestionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Question{}
	if err = randomize.Struct(seed, o, questionDBTypes, true, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Questions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQuestionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Question{}
	if err = randomize.Struct(seed, o, questionDBTypes, true, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Questions().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Questions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQuestionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Question{}
	if err = randomize.Struct(seed, o, questionDBTypes, true, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QuestionSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Questions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testQuestionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Question{}
	if err = randomize.Struct(seed, o, questionDBTypes, true, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := QuestionExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Question exists: %s", err)
	}
	if !e {
		t.Errorf("Expected QuestionExists to return true, but got false.")
	}
}

func testQuestionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Question{}
	if err = randomize.Struct(seed, o, questionDBTypes, true, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	questionFound, err := FindQuestion(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if questionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testQuestionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Question{}
	if err = randomize.Struct(seed, o, questionDBTypes, true, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Questions().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testQuestionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Question{}
	if err = randomize.Struct(seed, o, questionDBTypes, true, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Questions().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testQuestionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	questionOne := &Question{}
	questionTwo := &Question{}
	if err = randomize.Struct(seed, questionOne, questionDBTypes, false, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}
	if err = randomize.Struct(seed, questionTwo, questionDBTypes, false, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = questionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = questionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Questions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testQuestionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	questionOne := &Question{}
	questionTwo := &Question{}
	if err = randomize.Struct(seed, questionOne, questionDBTypes, false, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}
	if err = randomize.Struct(seed, questionTwo, questionDBTypes, false, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = questionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = questionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Questions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func questionBeforeInsertHook(e boil.Executor, o *Question) error {
	*o = Question{}
	return nil
}

func questionAfterInsertHook(e boil.Executor, o *Question) error {
	*o = Question{}
	return nil
}

func questionAfterSelectHook(e boil.Executor, o *Question) error {
	*o = Question{}
	return nil
}

func questionBeforeUpdateHook(e boil.Executor, o *Question) error {
	*o = Question{}
	return nil
}

func questionAfterUpdateHook(e boil.Executor, o *Question) error {
	*o = Question{}
	return nil
}

func questionBeforeDeleteHook(e boil.Executor, o *Question) error {
	*o = Question{}
	return nil
}

func questionAfterDeleteHook(e boil.Executor, o *Question) error {
	*o = Question{}
	return nil
}

func questionBeforeUpsertHook(e boil.Executor, o *Question) error {
	*o = Question{}
	return nil
}

func questionAfterUpsertHook(e boil.Executor, o *Question) error {
	*o = Question{}
	return nil
}

func testQuestionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Question{}
	o := &Question{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, questionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Question object: %s", err)
	}

	AddQuestionHook(boil.BeforeInsertHook, questionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	questionBeforeInsertHooks = []QuestionHook{}

	AddQuestionHook(boil.AfterInsertHook, questionAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	questionAfterInsertHooks = []QuestionHook{}

	AddQuestionHook(boil.AfterSelectHook, questionAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	questionAfterSelectHooks = []QuestionHook{}

	AddQuestionHook(boil.BeforeUpdateHook, questionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	questionBeforeUpdateHooks = []QuestionHook{}

	AddQuestionHook(boil.AfterUpdateHook, questionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	questionAfterUpdateHooks = []QuestionHook{}

	AddQuestionHook(boil.BeforeDeleteHook, questionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	questionBeforeDeleteHooks = []QuestionHook{}

	AddQuestionHook(boil.AfterDeleteHook, questionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	questionAfterDeleteHooks = []QuestionHook{}

	AddQuestionHook(boil.BeforeUpsertHook, questionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	questionBeforeUpsertHooks = []QuestionHook{}

	AddQuestionHook(boil.AfterUpsertHook, questionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	questionAfterUpsertHooks = []QuestionHook{}
}

func testQuestionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Question{}
	if err = randomize.Struct(seed, o, questionDBTypes, true, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Questions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQuestionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Question{}
	if err = randomize.Struct(seed, o, questionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(questionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Questions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testQuestionToManyEventQuestions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Question
	var b, c EventQuestion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, questionDBTypes, true, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, eventQuestionDBTypes, false, eventQuestionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, eventQuestionDBTypes, false, eventQuestionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.QuestionID = a.ID
	c.QuestionID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	eventQuestion, err := a.EventQuestions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range eventQuestion {
		if v.QuestionID == b.QuestionID {
			bFound = true
		}
		if v.QuestionID == c.QuestionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := QuestionSlice{&a}
	if err = a.L.LoadEventQuestions(tx, false, (*[]*Question)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EventQuestions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.EventQuestions = nil
	if err = a.L.LoadEventQuestions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EventQuestions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", eventQuestion)
	}
}

func testQuestionToManyQuestionAnswers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Question
	var b, c QuestionAnswer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, questionDBTypes, true, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, questionAnswerDBTypes, false, questionAnswerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, questionAnswerDBTypes, false, questionAnswerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.QuestionID = a.ID
	c.QuestionID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	questionAnswer, err := a.QuestionAnswers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range questionAnswer {
		if v.QuestionID == b.QuestionID {
			bFound = true
		}
		if v.QuestionID == c.QuestionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := QuestionSlice{&a}
	if err = a.L.LoadQuestionAnswers(tx, false, (*[]*Question)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.QuestionAnswers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.QuestionAnswers = nil
	if err = a.L.LoadQuestionAnswers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.QuestionAnswers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", questionAnswer)
	}
}

func testQuestionToManyTicketQuestions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Question
	var b, c TicketQuestion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, questionDBTypes, true, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, ticketQuestionDBTypes, false, ticketQuestionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ticketQuestionDBTypes, false, ticketQuestionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.QuestionID = a.ID
	c.QuestionID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	ticketQuestion, err := a.TicketQuestions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range ticketQuestion {
		if v.QuestionID == b.QuestionID {
			bFound = true
		}
		if v.QuestionID == c.QuestionID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := QuestionSlice{&a}
	if err = a.L.LoadTicketQuestions(tx, false, (*[]*Question)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TicketQuestions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TicketQuestions = nil
	if err = a.L.LoadTicketQuestions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TicketQuestions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", ticketQuestion)
	}
}

func testQuestionToManyAddOpEventQuestions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Question
	var b, c, d, e EventQuestion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, questionDBTypes, false, strmangle.SetComplement(questionPrimaryKeyColumns, questionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*EventQuestion{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, eventQuestionDBTypes, false, strmangle.SetComplement(eventQuestionPrimaryKeyColumns, eventQuestionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*EventQuestion{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEventQuestions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.QuestionID {
			t.Error("foreign key was wrong value", a.ID, first.QuestionID)
		}
		if a.ID != second.QuestionID {
			t.Error("foreign key was wrong value", a.ID, second.QuestionID)
		}

		if first.R.Question != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Question != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.EventQuestions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.EventQuestions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.EventQuestions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testQuestionToManyAddOpQuestionAnswers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Question
	var b, c, d, e QuestionAnswer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, questionDBTypes, false, strmangle.SetComplement(questionPrimaryKeyColumns, questionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*QuestionAnswer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, questionAnswerDBTypes, false, strmangle.SetComplement(questionAnswerPrimaryKeyColumns, questionAnswerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*QuestionAnswer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddQuestionAnswers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.QuestionID {
			t.Error("foreign key was wrong value", a.ID, first.QuestionID)
		}
		if a.ID != second.QuestionID {
			t.Error("foreign key was wrong value", a.ID, second.QuestionID)
		}

		if first.R.Question != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Question != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.QuestionAnswers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.QuestionAnswers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.QuestionAnswers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testQuestionToManyAddOpTicketQuestions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Question
	var b, c, d, e TicketQuestion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, questionDBTypes, false, strmangle.SetComplement(questionPrimaryKeyColumns, questionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TicketQuestion{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ticketQuestionDBTypes, false, strmangle.SetComplement(ticketQuestionPrimaryKeyColumns, ticketQuestionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TicketQuestion{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTicketQuestions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.QuestionID {
			t.Error("foreign key was wrong value", a.ID, first.QuestionID)
		}
		if a.ID != second.QuestionID {
			t.Error("foreign key was wrong value", a.ID, second.QuestionID)
		}

		if first.R.Question != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Question != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TicketQuestions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TicketQuestions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TicketQuestions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testQuestionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Question{}
	if err = randomize.Struct(seed, o, questionDBTypes, true, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testQuestionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Question{}
	if err = randomize.Struct(seed, o, questionDBTypes, true, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := QuestionSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testQuestionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Question{}
	if err = randomize.Struct(seed, o, questionDBTypes, true, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Questions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	questionDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`, `ID`: `integer`, `Title`: `text`, `Type`: `character varying`, `UpdatedAt`: `timestamp without time zone`}
	_               = bytes.MinRead
)

func testQuestionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(questionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(questionColumns) == len(questionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Question{}
	if err = randomize.Struct(seed, o, questionDBTypes, true, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Questions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, questionDBTypes, true, questionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testQuestionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(questionColumns) == len(questionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Question{}
	if err = randomize.Struct(seed, o, questionDBTypes, true, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Questions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, questionDBTypes, true, questionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(questionColumns, questionPrimaryKeyColumns) {
		fields = questionColumns
	} else {
		fields = strmangle.SetComplement(
			questionColumns,
			questionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := QuestionSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testQuestionsUpsert(t *testing.T) {
	t.Parallel()

	if len(questionColumns) == len(questionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Question{}
	if err = randomize.Struct(seed, &o, questionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Question: %s", err)
	}

	count, err := Questions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, questionDBTypes, false, questionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Question: %s", err)
	}

	count, err = Questions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
