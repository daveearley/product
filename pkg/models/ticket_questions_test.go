// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTicketQuestions(t *testing.T) {
	t.Parallel()

	query := TicketQuestions()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTicketQuestionsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketQuestion{}
	if err = randomize.Struct(seed, o, ticketQuestionDBTypes, true, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketQuestions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketQuestionsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketQuestion{}
	if err = randomize.Struct(seed, o, ticketQuestionDBTypes, true, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TicketQuestions().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketQuestions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketQuestionsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketQuestion{}
	if err = randomize.Struct(seed, o, ticketQuestionDBTypes, true, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TicketQuestionSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketQuestions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketQuestionsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketQuestion{}
	if err = randomize.Struct(seed, o, ticketQuestionDBTypes, true, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TicketQuestionExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TicketQuestion exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TicketQuestionExists to return true, but got false.")
	}
}

func testTicketQuestionsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketQuestion{}
	if err = randomize.Struct(seed, o, ticketQuestionDBTypes, true, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ticketQuestionFound, err := FindTicketQuestion(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ticketQuestionFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTicketQuestionsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketQuestion{}
	if err = randomize.Struct(seed, o, ticketQuestionDBTypes, true, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TicketQuestions().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testTicketQuestionsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketQuestion{}
	if err = randomize.Struct(seed, o, ticketQuestionDBTypes, true, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TicketQuestions().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTicketQuestionsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ticketQuestionOne := &TicketQuestion{}
	ticketQuestionTwo := &TicketQuestion{}
	if err = randomize.Struct(seed, ticketQuestionOne, ticketQuestionDBTypes, false, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}
	if err = randomize.Struct(seed, ticketQuestionTwo, ticketQuestionDBTypes, false, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = ticketQuestionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ticketQuestionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TicketQuestions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTicketQuestionsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ticketQuestionOne := &TicketQuestion{}
	ticketQuestionTwo := &TicketQuestion{}
	if err = randomize.Struct(seed, ticketQuestionOne, ticketQuestionDBTypes, false, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}
	if err = randomize.Struct(seed, ticketQuestionTwo, ticketQuestionDBTypes, false, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = ticketQuestionOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ticketQuestionTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketQuestions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ticketQuestionBeforeInsertHook(e boil.Executor, o *TicketQuestion) error {
	*o = TicketQuestion{}
	return nil
}

func ticketQuestionAfterInsertHook(e boil.Executor, o *TicketQuestion) error {
	*o = TicketQuestion{}
	return nil
}

func ticketQuestionAfterSelectHook(e boil.Executor, o *TicketQuestion) error {
	*o = TicketQuestion{}
	return nil
}

func ticketQuestionBeforeUpdateHook(e boil.Executor, o *TicketQuestion) error {
	*o = TicketQuestion{}
	return nil
}

func ticketQuestionAfterUpdateHook(e boil.Executor, o *TicketQuestion) error {
	*o = TicketQuestion{}
	return nil
}

func ticketQuestionBeforeDeleteHook(e boil.Executor, o *TicketQuestion) error {
	*o = TicketQuestion{}
	return nil
}

func ticketQuestionAfterDeleteHook(e boil.Executor, o *TicketQuestion) error {
	*o = TicketQuestion{}
	return nil
}

func ticketQuestionBeforeUpsertHook(e boil.Executor, o *TicketQuestion) error {
	*o = TicketQuestion{}
	return nil
}

func ticketQuestionAfterUpsertHook(e boil.Executor, o *TicketQuestion) error {
	*o = TicketQuestion{}
	return nil
}

func testTicketQuestionsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &TicketQuestion{}
	o := &TicketQuestion{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ticketQuestionDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TicketQuestion object: %s", err)
	}

	AddTicketQuestionHook(boil.BeforeInsertHook, ticketQuestionBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ticketQuestionBeforeInsertHooks = []TicketQuestionHook{}

	AddTicketQuestionHook(boil.AfterInsertHook, ticketQuestionAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ticketQuestionAfterInsertHooks = []TicketQuestionHook{}

	AddTicketQuestionHook(boil.AfterSelectHook, ticketQuestionAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ticketQuestionAfterSelectHooks = []TicketQuestionHook{}

	AddTicketQuestionHook(boil.BeforeUpdateHook, ticketQuestionBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ticketQuestionBeforeUpdateHooks = []TicketQuestionHook{}

	AddTicketQuestionHook(boil.AfterUpdateHook, ticketQuestionAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ticketQuestionAfterUpdateHooks = []TicketQuestionHook{}

	AddTicketQuestionHook(boil.BeforeDeleteHook, ticketQuestionBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ticketQuestionBeforeDeleteHooks = []TicketQuestionHook{}

	AddTicketQuestionHook(boil.AfterDeleteHook, ticketQuestionAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ticketQuestionAfterDeleteHooks = []TicketQuestionHook{}

	AddTicketQuestionHook(boil.BeforeUpsertHook, ticketQuestionBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ticketQuestionBeforeUpsertHooks = []TicketQuestionHook{}

	AddTicketQuestionHook(boil.AfterUpsertHook, ticketQuestionAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ticketQuestionAfterUpsertHooks = []TicketQuestionHook{}
}

func testTicketQuestionsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketQuestion{}
	if err = randomize.Struct(seed, o, ticketQuestionDBTypes, true, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketQuestions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTicketQuestionsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketQuestion{}
	if err = randomize.Struct(seed, o, ticketQuestionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(ticketQuestionColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TicketQuestions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTicketQuestionToOneTicketUsingTicket(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TicketQuestion
	var foreign Ticket

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ticketQuestionDBTypes, false, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TicketID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Ticket().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TicketQuestionSlice{&local}
	if err = local.L.LoadTicket(tx, false, (*[]*TicketQuestion)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ticket == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Ticket = nil
	if err = local.L.LoadTicket(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ticket == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTicketQuestionToOneQuestionUsingQuestion(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TicketQuestion
	var foreign Question

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ticketQuestionDBTypes, false, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, questionDBTypes, false, questionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Question struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.QuestionID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Question().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TicketQuestionSlice{&local}
	if err = local.L.LoadQuestion(tx, false, (*[]*TicketQuestion)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Question == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Question = nil
	if err = local.L.LoadQuestion(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Question == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTicketQuestionToOneSetOpTicketUsingTicket(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TicketQuestion
	var b, c Ticket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketQuestionDBTypes, false, strmangle.SetComplement(ticketQuestionPrimaryKeyColumns, ticketQuestionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Ticket{&b, &c} {
		err = a.SetTicket(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Ticket != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TicketQuestions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TicketID != x.ID {
			t.Error("foreign key was wrong value", a.TicketID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TicketID))
		reflect.Indirect(reflect.ValueOf(&a.TicketID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TicketID != x.ID {
			t.Error("foreign key was wrong value", a.TicketID, x.ID)
		}
	}
}
func testTicketQuestionToOneSetOpQuestionUsingQuestion(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TicketQuestion
	var b, c Question

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketQuestionDBTypes, false, strmangle.SetComplement(ticketQuestionPrimaryKeyColumns, ticketQuestionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, questionDBTypes, false, strmangle.SetComplement(questionPrimaryKeyColumns, questionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, questionDBTypes, false, strmangle.SetComplement(questionPrimaryKeyColumns, questionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Question{&b, &c} {
		err = a.SetQuestion(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Question != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TicketQuestions[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.QuestionID != x.ID {
			t.Error("foreign key was wrong value", a.QuestionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.QuestionID))
		reflect.Indirect(reflect.ValueOf(&a.QuestionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.QuestionID != x.ID {
			t.Error("foreign key was wrong value", a.QuestionID, x.ID)
		}
	}
}

func testTicketQuestionsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketQuestion{}
	if err = randomize.Struct(seed, o, ticketQuestionDBTypes, true, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTicketQuestionsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketQuestion{}
	if err = randomize.Struct(seed, o, ticketQuestionDBTypes, true, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TicketQuestionSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testTicketQuestionsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketQuestion{}
	if err = randomize.Struct(seed, o, ticketQuestionDBTypes, true, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TicketQuestions().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ticketQuestionDBTypes = map[string]string{`ID`: `integer`, `QuestionID`: `integer`, `TicketID`: `integer`}
	_                     = bytes.MinRead
)

func testTicketQuestionsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ticketQuestionPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ticketQuestionColumns) == len(ticketQuestionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TicketQuestion{}
	if err = randomize.Struct(seed, o, ticketQuestionDBTypes, true, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketQuestions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ticketQuestionDBTypes, true, ticketQuestionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTicketQuestionsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ticketQuestionColumns) == len(ticketQuestionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TicketQuestion{}
	if err = randomize.Struct(seed, o, ticketQuestionDBTypes, true, ticketQuestionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketQuestions().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ticketQuestionDBTypes, true, ticketQuestionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ticketQuestionColumns, ticketQuestionPrimaryKeyColumns) {
		fields = ticketQuestionColumns
	} else {
		fields = strmangle.SetComplement(
			ticketQuestionColumns,
			ticketQuestionPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TicketQuestionSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTicketQuestionsUpsert(t *testing.T) {
	t.Parallel()

	if len(ticketQuestionColumns) == len(ticketQuestionPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TicketQuestion{}
	if err = randomize.Struct(seed, &o, ticketQuestionDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TicketQuestion: %s", err)
	}

	count, err := TicketQuestions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ticketQuestionDBTypes, false, ticketQuestionPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketQuestion struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TicketQuestion: %s", err)
	}

	count, err = TicketQuestions().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
