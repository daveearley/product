// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// EventAttribute is an object representing the database table.
type EventAttribute struct {
	ID          int `boil:"id" json:"id" toml:"id" yaml:"id"`
	EventID     int `boil:"event_id" json:"event_id" toml:"event_id" yaml:"event_id"`
	AttributeID int `boil:"attribute_id" json:"attribute_id" toml:"attribute_id" yaml:"attribute_id"`

	R *eventAttributeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L eventAttributeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var EventAttributeColumns = struct {
	ID          string
	EventID     string
	AttributeID string
}{
	ID:          "id",
	EventID:     "event_id",
	AttributeID: "attribute_id",
}

// EventAttributeRels is where relationship names are stored.
var EventAttributeRels = struct {
	Event     string
	Attribute string
}{
	Event:     "Event",
	Attribute: "Attribute",
}

// eventAttributeR is where relationships are stored.
type eventAttributeR struct {
	Event     *Event
	Attribute *Attribute
}

// NewStruct creates a new relationship struct
func (*eventAttributeR) NewStruct() *eventAttributeR {
	return &eventAttributeR{}
}

// eventAttributeL is where Load methods for each relationship are stored.
type eventAttributeL struct{}

var (
	eventAttributeColumns               = []string{"id", "event_id", "attribute_id"}
	eventAttributeColumnsWithoutDefault = []string{"event_id", "attribute_id"}
	eventAttributeColumnsWithDefault    = []string{"id"}
	eventAttributePrimaryKeyColumns     = []string{"id"}
)

type (
	// EventAttributeSlice is an alias for a slice of pointers to EventAttribute.
	// This should generally be used opposed to []EventAttribute.
	EventAttributeSlice []*EventAttribute
	// EventAttributeHook is the signature for custom EventAttribute hook methods
	EventAttributeHook func(boil.Executor, *EventAttribute) error

	eventAttributeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	eventAttributeType                 = reflect.TypeOf(&EventAttribute{})
	eventAttributeMapping              = queries.MakeStructMapping(eventAttributeType)
	eventAttributePrimaryKeyMapping, _ = queries.BindMapping(eventAttributeType, eventAttributeMapping, eventAttributePrimaryKeyColumns)
	eventAttributeInsertCacheMut       sync.RWMutex
	eventAttributeInsertCache          = make(map[string]insertCache)
	eventAttributeUpdateCacheMut       sync.RWMutex
	eventAttributeUpdateCache          = make(map[string]updateCache)
	eventAttributeUpsertCacheMut       sync.RWMutex
	eventAttributeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var eventAttributeBeforeInsertHooks []EventAttributeHook
var eventAttributeBeforeUpdateHooks []EventAttributeHook
var eventAttributeBeforeDeleteHooks []EventAttributeHook
var eventAttributeBeforeUpsertHooks []EventAttributeHook

var eventAttributeAfterInsertHooks []EventAttributeHook
var eventAttributeAfterSelectHooks []EventAttributeHook
var eventAttributeAfterUpdateHooks []EventAttributeHook
var eventAttributeAfterDeleteHooks []EventAttributeHook
var eventAttributeAfterUpsertHooks []EventAttributeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *EventAttribute) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range eventAttributeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *EventAttribute) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range eventAttributeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *EventAttribute) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range eventAttributeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *EventAttribute) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range eventAttributeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *EventAttribute) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range eventAttributeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *EventAttribute) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range eventAttributeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *EventAttribute) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range eventAttributeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *EventAttribute) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range eventAttributeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *EventAttribute) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range eventAttributeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddEventAttributeHook registers your hook function for all future operations.
func AddEventAttributeHook(hookPoint boil.HookPoint, eventAttributeHook EventAttributeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		eventAttributeBeforeInsertHooks = append(eventAttributeBeforeInsertHooks, eventAttributeHook)
	case boil.BeforeUpdateHook:
		eventAttributeBeforeUpdateHooks = append(eventAttributeBeforeUpdateHooks, eventAttributeHook)
	case boil.BeforeDeleteHook:
		eventAttributeBeforeDeleteHooks = append(eventAttributeBeforeDeleteHooks, eventAttributeHook)
	case boil.BeforeUpsertHook:
		eventAttributeBeforeUpsertHooks = append(eventAttributeBeforeUpsertHooks, eventAttributeHook)
	case boil.AfterInsertHook:
		eventAttributeAfterInsertHooks = append(eventAttributeAfterInsertHooks, eventAttributeHook)
	case boil.AfterSelectHook:
		eventAttributeAfterSelectHooks = append(eventAttributeAfterSelectHooks, eventAttributeHook)
	case boil.AfterUpdateHook:
		eventAttributeAfterUpdateHooks = append(eventAttributeAfterUpdateHooks, eventAttributeHook)
	case boil.AfterDeleteHook:
		eventAttributeAfterDeleteHooks = append(eventAttributeAfterDeleteHooks, eventAttributeHook)
	case boil.AfterUpsertHook:
		eventAttributeAfterUpsertHooks = append(eventAttributeAfterUpsertHooks, eventAttributeHook)
	}
}

// One returns a single eventAttribute record from the query.
func (q eventAttributeQuery) One(exec boil.Executor) (*EventAttribute, error) {
	o := &EventAttribute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for event_attributes")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all EventAttribute records from the query.
func (q eventAttributeQuery) All(exec boil.Executor) (EventAttributeSlice, error) {
	var o []*EventAttribute

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to EventAttribute slice")
	}

	if len(eventAttributeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all EventAttribute records in the query.
func (q eventAttributeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count event_attributes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q eventAttributeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if event_attributes exists")
	}

	return count > 0, nil
}

// Event pointed to by the foreign key.
func (o *EventAttribute) Event(mods ...qm.QueryMod) eventQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.EventID),
	}

	queryMods = append(queryMods, mods...)

	query := Events(queryMods...)
	queries.SetFrom(query.Query, "\"events\"")

	return query
}

// Attribute pointed to by the foreign key.
func (o *EventAttribute) Attribute(mods ...qm.QueryMod) attributeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.AttributeID),
	}

	queryMods = append(queryMods, mods...)

	query := Attributes(queryMods...)
	queries.SetFrom(query.Query, "\"attributes\"")

	return query
}

// LoadEvent allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (eventAttributeL) LoadEvent(e boil.Executor, singular bool, maybeEventAttribute interface{}, mods queries.Applicator) error {
	var slice []*EventAttribute
	var object *EventAttribute

	if singular {
		object = maybeEventAttribute.(*EventAttribute)
	} else {
		slice = *maybeEventAttribute.(*[]*EventAttribute)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &eventAttributeR{}
		}
		args = append(args, object.EventID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventAttributeR{}
			}

			for _, a := range args {
				if a == obj.EventID {
					continue Outer
				}
			}

			args = append(args, obj.EventID)
		}
	}

	query := NewQuery(qm.From(`events`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Event")
	}

	var resultSlice []*Event
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Event")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for events")
	}

	if len(eventAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Event = foreign
		if foreign.R == nil {
			foreign.R = &eventR{}
		}
		foreign.R.EventAttributes = append(foreign.R.EventAttributes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.EventID == foreign.ID {
				local.R.Event = foreign
				if foreign.R == nil {
					foreign.R = &eventR{}
				}
				foreign.R.EventAttributes = append(foreign.R.EventAttributes, local)
				break
			}
		}
	}

	return nil
}

// LoadAttribute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (eventAttributeL) LoadAttribute(e boil.Executor, singular bool, maybeEventAttribute interface{}, mods queries.Applicator) error {
	var slice []*EventAttribute
	var object *EventAttribute

	if singular {
		object = maybeEventAttribute.(*EventAttribute)
	} else {
		slice = *maybeEventAttribute.(*[]*EventAttribute)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &eventAttributeR{}
		}
		args = append(args, object.AttributeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &eventAttributeR{}
			}

			for _, a := range args {
				if a == obj.AttributeID {
					continue Outer
				}
			}

			args = append(args, obj.AttributeID)
		}
	}

	query := NewQuery(qm.From(`attributes`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Attribute")
	}

	var resultSlice []*Attribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Attribute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attributes")
	}

	if len(eventAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Attribute = foreign
		if foreign.R == nil {
			foreign.R = &attributeR{}
		}
		foreign.R.EventAttributes = append(foreign.R.EventAttributes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AttributeID == foreign.ID {
				local.R.Attribute = foreign
				if foreign.R == nil {
					foreign.R = &attributeR{}
				}
				foreign.R.EventAttributes = append(foreign.R.EventAttributes, local)
				break
			}
		}
	}

	return nil
}

// SetEvent of the eventAttribute to the related item.
// Sets o.R.Event to related.
// Adds o to related.R.EventAttributes.
func (o *EventAttribute) SetEvent(exec boil.Executor, insert bool, related *Event) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"event_attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"event_id"}),
		strmangle.WhereClause("\"", "\"", 2, eventAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.EventID = related.ID
	if o.R == nil {
		o.R = &eventAttributeR{
			Event: related,
		}
	} else {
		o.R.Event = related
	}

	if related.R == nil {
		related.R = &eventR{
			EventAttributes: EventAttributeSlice{o},
		}
	} else {
		related.R.EventAttributes = append(related.R.EventAttributes, o)
	}

	return nil
}

// SetAttribute of the eventAttribute to the related item.
// Sets o.R.Attribute to related.
// Adds o to related.R.EventAttributes.
func (o *EventAttribute) SetAttribute(exec boil.Executor, insert bool, related *Attribute) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"event_attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"attribute_id"}),
		strmangle.WhereClause("\"", "\"", 2, eventAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AttributeID = related.ID
	if o.R == nil {
		o.R = &eventAttributeR{
			Attribute: related,
		}
	} else {
		o.R.Attribute = related
	}

	if related.R == nil {
		related.R = &attributeR{
			EventAttributes: EventAttributeSlice{o},
		}
	} else {
		related.R.EventAttributes = append(related.R.EventAttributes, o)
	}

	return nil
}

// EventAttributes retrieves all the records using an executor.
func EventAttributes(mods ...qm.QueryMod) eventAttributeQuery {
	mods = append(mods, qm.From("\"event_attributes\""))
	return eventAttributeQuery{NewQuery(mods...)}
}

// FindEventAttribute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindEventAttribute(exec boil.Executor, iD int, selectCols ...string) (*EventAttribute, error) {
	eventAttributeObj := &EventAttribute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"event_attributes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, eventAttributeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from event_attributes")
	}

	return eventAttributeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *EventAttribute) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no event_attributes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventAttributeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	eventAttributeInsertCacheMut.RLock()
	cache, cached := eventAttributeInsertCache[key]
	eventAttributeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			eventAttributeColumns,
			eventAttributeColumnsWithDefault,
			eventAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(eventAttributeType, eventAttributeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(eventAttributeType, eventAttributeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"event_attributes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"event_attributes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into event_attributes")
	}

	if !cached {
		eventAttributeInsertCacheMut.Lock()
		eventAttributeInsertCache[key] = cache
		eventAttributeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the EventAttribute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *EventAttribute) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	eventAttributeUpdateCacheMut.RLock()
	cache, cached := eventAttributeUpdateCache[key]
	eventAttributeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			eventAttributeColumns,
			eventAttributePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update event_attributes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"event_attributes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, eventAttributePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(eventAttributeType, eventAttributeMapping, append(wl, eventAttributePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update event_attributes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for event_attributes")
	}

	if !cached {
		eventAttributeUpdateCacheMut.Lock()
		eventAttributeUpdateCache[key] = cache
		eventAttributeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q eventAttributeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for event_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for event_attributes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o EventAttributeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"event_attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, eventAttributePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in eventAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all eventAttribute")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *EventAttribute) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no event_attributes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(eventAttributeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	eventAttributeUpsertCacheMut.RLock()
	cache, cached := eventAttributeUpsertCache[key]
	eventAttributeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			eventAttributeColumns,
			eventAttributeColumnsWithDefault,
			eventAttributeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			eventAttributeColumns,
			eventAttributePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert event_attributes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(eventAttributePrimaryKeyColumns))
			copy(conflict, eventAttributePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"event_attributes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(eventAttributeType, eventAttributeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(eventAttributeType, eventAttributeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert event_attributes")
	}

	if !cached {
		eventAttributeUpsertCacheMut.Lock()
		eventAttributeUpsertCache[key] = cache
		eventAttributeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single EventAttribute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *EventAttribute) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EventAttribute provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), eventAttributePrimaryKeyMapping)
	sql := "DELETE FROM \"event_attributes\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from event_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for event_attributes")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q eventAttributeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no eventAttributeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from event_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for event_attributes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o EventAttributeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no EventAttribute slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(eventAttributeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"event_attributes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventAttributePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from eventAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for event_attributes")
	}

	if len(eventAttributeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *EventAttribute) Reload(exec boil.Executor) error {
	ret, err := FindEventAttribute(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *EventAttributeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := EventAttributeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), eventAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"event_attributes\".* FROM \"event_attributes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, eventAttributePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in EventAttributeSlice")
	}

	*o = slice

	return nil
}

// EventAttributeExists checks if the EventAttribute row exists.
func EventAttributeExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"event_attributes\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if event_attributes exists")
	}

	return exists, nil
}
