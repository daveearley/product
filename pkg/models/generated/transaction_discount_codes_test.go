// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTransactionDiscountCodes(t *testing.T) {
	t.Parallel()

	query := TransactionDiscountCodes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTransactionDiscountCodesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionDiscountCode{}
	if err = randomize.Struct(seed, o, transactionDiscountCodeDBTypes, true, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TransactionDiscountCodes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTransactionDiscountCodesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionDiscountCode{}
	if err = randomize.Struct(seed, o, transactionDiscountCodeDBTypes, true, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TransactionDiscountCodes().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TransactionDiscountCodes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTransactionDiscountCodesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionDiscountCode{}
	if err = randomize.Struct(seed, o, transactionDiscountCodeDBTypes, true, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TransactionDiscountCodeSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TransactionDiscountCodes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTransactionDiscountCodesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionDiscountCode{}
	if err = randomize.Struct(seed, o, transactionDiscountCodeDBTypes, true, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TransactionDiscountCodeExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TransactionDiscountCode exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TransactionDiscountCodeExists to return true, but got false.")
	}
}

func testTransactionDiscountCodesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionDiscountCode{}
	if err = randomize.Struct(seed, o, transactionDiscountCodeDBTypes, true, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	transactionDiscountCodeFound, err := FindTransactionDiscountCode(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if transactionDiscountCodeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTransactionDiscountCodesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionDiscountCode{}
	if err = randomize.Struct(seed, o, transactionDiscountCodeDBTypes, true, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TransactionDiscountCodes().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testTransactionDiscountCodesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionDiscountCode{}
	if err = randomize.Struct(seed, o, transactionDiscountCodeDBTypes, true, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TransactionDiscountCodes().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTransactionDiscountCodesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	transactionDiscountCodeOne := &TransactionDiscountCode{}
	transactionDiscountCodeTwo := &TransactionDiscountCode{}
	if err = randomize.Struct(seed, transactionDiscountCodeOne, transactionDiscountCodeDBTypes, false, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}
	if err = randomize.Struct(seed, transactionDiscountCodeTwo, transactionDiscountCodeDBTypes, false, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = transactionDiscountCodeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = transactionDiscountCodeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TransactionDiscountCodes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTransactionDiscountCodesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	transactionDiscountCodeOne := &TransactionDiscountCode{}
	transactionDiscountCodeTwo := &TransactionDiscountCode{}
	if err = randomize.Struct(seed, transactionDiscountCodeOne, transactionDiscountCodeDBTypes, false, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}
	if err = randomize.Struct(seed, transactionDiscountCodeTwo, transactionDiscountCodeDBTypes, false, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = transactionDiscountCodeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = transactionDiscountCodeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TransactionDiscountCodes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func transactionDiscountCodeBeforeInsertHook(e boil.Executor, o *TransactionDiscountCode) error {
	*o = TransactionDiscountCode{}
	return nil
}

func transactionDiscountCodeAfterInsertHook(e boil.Executor, o *TransactionDiscountCode) error {
	*o = TransactionDiscountCode{}
	return nil
}

func transactionDiscountCodeAfterSelectHook(e boil.Executor, o *TransactionDiscountCode) error {
	*o = TransactionDiscountCode{}
	return nil
}

func transactionDiscountCodeBeforeUpdateHook(e boil.Executor, o *TransactionDiscountCode) error {
	*o = TransactionDiscountCode{}
	return nil
}

func transactionDiscountCodeAfterUpdateHook(e boil.Executor, o *TransactionDiscountCode) error {
	*o = TransactionDiscountCode{}
	return nil
}

func transactionDiscountCodeBeforeDeleteHook(e boil.Executor, o *TransactionDiscountCode) error {
	*o = TransactionDiscountCode{}
	return nil
}

func transactionDiscountCodeAfterDeleteHook(e boil.Executor, o *TransactionDiscountCode) error {
	*o = TransactionDiscountCode{}
	return nil
}

func transactionDiscountCodeBeforeUpsertHook(e boil.Executor, o *TransactionDiscountCode) error {
	*o = TransactionDiscountCode{}
	return nil
}

func transactionDiscountCodeAfterUpsertHook(e boil.Executor, o *TransactionDiscountCode) error {
	*o = TransactionDiscountCode{}
	return nil
}

func testTransactionDiscountCodesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &TransactionDiscountCode{}
	o := &TransactionDiscountCode{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, transactionDiscountCodeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode object: %s", err)
	}

	AddTransactionDiscountCodeHook(boil.BeforeInsertHook, transactionDiscountCodeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	transactionDiscountCodeBeforeInsertHooks = []TransactionDiscountCodeHook{}

	AddTransactionDiscountCodeHook(boil.AfterInsertHook, transactionDiscountCodeAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	transactionDiscountCodeAfterInsertHooks = []TransactionDiscountCodeHook{}

	AddTransactionDiscountCodeHook(boil.AfterSelectHook, transactionDiscountCodeAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	transactionDiscountCodeAfterSelectHooks = []TransactionDiscountCodeHook{}

	AddTransactionDiscountCodeHook(boil.BeforeUpdateHook, transactionDiscountCodeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	transactionDiscountCodeBeforeUpdateHooks = []TransactionDiscountCodeHook{}

	AddTransactionDiscountCodeHook(boil.AfterUpdateHook, transactionDiscountCodeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	transactionDiscountCodeAfterUpdateHooks = []TransactionDiscountCodeHook{}

	AddTransactionDiscountCodeHook(boil.BeforeDeleteHook, transactionDiscountCodeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	transactionDiscountCodeBeforeDeleteHooks = []TransactionDiscountCodeHook{}

	AddTransactionDiscountCodeHook(boil.AfterDeleteHook, transactionDiscountCodeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	transactionDiscountCodeAfterDeleteHooks = []TransactionDiscountCodeHook{}

	AddTransactionDiscountCodeHook(boil.BeforeUpsertHook, transactionDiscountCodeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	transactionDiscountCodeBeforeUpsertHooks = []TransactionDiscountCodeHook{}

	AddTransactionDiscountCodeHook(boil.AfterUpsertHook, transactionDiscountCodeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	transactionDiscountCodeAfterUpsertHooks = []TransactionDiscountCodeHook{}
}

func testTransactionDiscountCodesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionDiscountCode{}
	if err = randomize.Struct(seed, o, transactionDiscountCodeDBTypes, true, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TransactionDiscountCodes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTransactionDiscountCodesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionDiscountCode{}
	if err = randomize.Struct(seed, o, transactionDiscountCodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(transactionDiscountCodeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TransactionDiscountCodes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTransactionDiscountCodeToOneTransactionUsingTransaction(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TransactionDiscountCode
	var foreign Transaction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, transactionDiscountCodeDBTypes, false, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Transaction struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TransactionID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Transaction().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TransactionDiscountCodeSlice{&local}
	if err = local.L.LoadTransaction(tx, false, (*[]*TransactionDiscountCode)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Transaction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Transaction = nil
	if err = local.L.LoadTransaction(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Transaction == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTransactionDiscountCodeToOneDiscountCodeUsingDiscountCode(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TransactionDiscountCode
	var foreign DiscountCode

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, transactionDiscountCodeDBTypes, false, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, discountCodeDBTypes, false, discountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize DiscountCode struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.DiscountCodeID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.DiscountCode().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TransactionDiscountCodeSlice{&local}
	if err = local.L.LoadDiscountCode(tx, false, (*[]*TransactionDiscountCode)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DiscountCode == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.DiscountCode = nil
	if err = local.L.LoadDiscountCode(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.DiscountCode == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTransactionDiscountCodeToOneSetOpTransactionUsingTransaction(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TransactionDiscountCode
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, transactionDiscountCodeDBTypes, false, strmangle.SetComplement(transactionDiscountCodePrimaryKeyColumns, transactionDiscountCodeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Transaction{&b, &c} {
		err = a.SetTransaction(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Transaction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TransactionDiscountCodes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TransactionID != x.ID {
			t.Error("foreign key was wrong value", a.TransactionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TransactionID))
		reflect.Indirect(reflect.ValueOf(&a.TransactionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TransactionID != x.ID {
			t.Error("foreign key was wrong value", a.TransactionID, x.ID)
		}
	}
}
func testTransactionDiscountCodeToOneSetOpDiscountCodeUsingDiscountCode(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TransactionDiscountCode
	var b, c DiscountCode

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, transactionDiscountCodeDBTypes, false, strmangle.SetComplement(transactionDiscountCodePrimaryKeyColumns, transactionDiscountCodeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, discountCodeDBTypes, false, strmangle.SetComplement(discountCodePrimaryKeyColumns, discountCodeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, discountCodeDBTypes, false, strmangle.SetComplement(discountCodePrimaryKeyColumns, discountCodeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*DiscountCode{&b, &c} {
		err = a.SetDiscountCode(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.DiscountCode != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TransactionDiscountCodes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.DiscountCodeID != x.ID {
			t.Error("foreign key was wrong value", a.DiscountCodeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.DiscountCodeID))
		reflect.Indirect(reflect.ValueOf(&a.DiscountCodeID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.DiscountCodeID != x.ID {
			t.Error("foreign key was wrong value", a.DiscountCodeID, x.ID)
		}
	}
}

func testTransactionDiscountCodesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionDiscountCode{}
	if err = randomize.Struct(seed, o, transactionDiscountCodeDBTypes, true, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTransactionDiscountCodesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionDiscountCode{}
	if err = randomize.Struct(seed, o, transactionDiscountCodeDBTypes, true, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TransactionDiscountCodeSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testTransactionDiscountCodesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionDiscountCode{}
	if err = randomize.Struct(seed, o, transactionDiscountCodeDBTypes, true, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TransactionDiscountCodes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	transactionDiscountCodeDBTypes = map[string]string{`DiscountCodeID`: `integer`, `ID`: `integer`, `TotalDiscount`: `numeric`, `TransactionID`: `integer`}
	_                              = bytes.MinRead
)

func testTransactionDiscountCodesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(transactionDiscountCodePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(transactionDiscountCodeColumns) == len(transactionDiscountCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TransactionDiscountCode{}
	if err = randomize.Struct(seed, o, transactionDiscountCodeDBTypes, true, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TransactionDiscountCodes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, transactionDiscountCodeDBTypes, true, transactionDiscountCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTransactionDiscountCodesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(transactionDiscountCodeColumns) == len(transactionDiscountCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TransactionDiscountCode{}
	if err = randomize.Struct(seed, o, transactionDiscountCodeDBTypes, true, transactionDiscountCodeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TransactionDiscountCodes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, transactionDiscountCodeDBTypes, true, transactionDiscountCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(transactionDiscountCodeColumns, transactionDiscountCodePrimaryKeyColumns) {
		fields = transactionDiscountCodeColumns
	} else {
		fields = strmangle.SetComplement(
			transactionDiscountCodeColumns,
			transactionDiscountCodePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TransactionDiscountCodeSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTransactionDiscountCodesUpsert(t *testing.T) {
	t.Parallel()

	if len(transactionDiscountCodeColumns) == len(transactionDiscountCodePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TransactionDiscountCode{}
	if err = randomize.Struct(seed, &o, transactionDiscountCodeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TransactionDiscountCode: %s", err)
	}

	count, err := TransactionDiscountCodes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, transactionDiscountCodeDBTypes, false, transactionDiscountCodePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TransactionDiscountCode struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TransactionDiscountCode: %s", err)
	}

	count, err = TransactionDiscountCodes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
