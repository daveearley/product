// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEventAttributes(t *testing.T) {
	t.Parallel()

	query := EventAttributes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEventAttributesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventAttribute{}
	if err = randomize.Struct(seed, o, eventAttributeDBTypes, true, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EventAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEventAttributesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventAttribute{}
	if err = randomize.Struct(seed, o, eventAttributeDBTypes, true, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := EventAttributes().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EventAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEventAttributesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventAttribute{}
	if err = randomize.Struct(seed, o, eventAttributeDBTypes, true, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EventAttributeSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := EventAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEventAttributesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventAttribute{}
	if err = randomize.Struct(seed, o, eventAttributeDBTypes, true, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EventAttributeExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if EventAttribute exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EventAttributeExists to return true, but got false.")
	}
}

func testEventAttributesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventAttribute{}
	if err = randomize.Struct(seed, o, eventAttributeDBTypes, true, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	eventAttributeFound, err := FindEventAttribute(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if eventAttributeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEventAttributesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventAttribute{}
	if err = randomize.Struct(seed, o, eventAttributeDBTypes, true, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = EventAttributes().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testEventAttributesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventAttribute{}
	if err = randomize.Struct(seed, o, eventAttributeDBTypes, true, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := EventAttributes().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEventAttributesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventAttributeOne := &EventAttribute{}
	eventAttributeTwo := &EventAttribute{}
	if err = randomize.Struct(seed, eventAttributeOne, eventAttributeDBTypes, false, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}
	if err = randomize.Struct(seed, eventAttributeTwo, eventAttributeDBTypes, false, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = eventAttributeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = eventAttributeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EventAttributes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEventAttributesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	eventAttributeOne := &EventAttribute{}
	eventAttributeTwo := &EventAttribute{}
	if err = randomize.Struct(seed, eventAttributeOne, eventAttributeDBTypes, false, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}
	if err = randomize.Struct(seed, eventAttributeTwo, eventAttributeDBTypes, false, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = eventAttributeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = eventAttributeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EventAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func eventAttributeBeforeInsertHook(e boil.Executor, o *EventAttribute) error {
	*o = EventAttribute{}
	return nil
}

func eventAttributeAfterInsertHook(e boil.Executor, o *EventAttribute) error {
	*o = EventAttribute{}
	return nil
}

func eventAttributeAfterSelectHook(e boil.Executor, o *EventAttribute) error {
	*o = EventAttribute{}
	return nil
}

func eventAttributeBeforeUpdateHook(e boil.Executor, o *EventAttribute) error {
	*o = EventAttribute{}
	return nil
}

func eventAttributeAfterUpdateHook(e boil.Executor, o *EventAttribute) error {
	*o = EventAttribute{}
	return nil
}

func eventAttributeBeforeDeleteHook(e boil.Executor, o *EventAttribute) error {
	*o = EventAttribute{}
	return nil
}

func eventAttributeAfterDeleteHook(e boil.Executor, o *EventAttribute) error {
	*o = EventAttribute{}
	return nil
}

func eventAttributeBeforeUpsertHook(e boil.Executor, o *EventAttribute) error {
	*o = EventAttribute{}
	return nil
}

func eventAttributeAfterUpsertHook(e boil.Executor, o *EventAttribute) error {
	*o = EventAttribute{}
	return nil
}

func testEventAttributesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &EventAttribute{}
	o := &EventAttribute{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, eventAttributeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize EventAttribute object: %s", err)
	}

	AddEventAttributeHook(boil.BeforeInsertHook, eventAttributeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	eventAttributeBeforeInsertHooks = []EventAttributeHook{}

	AddEventAttributeHook(boil.AfterInsertHook, eventAttributeAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	eventAttributeAfterInsertHooks = []EventAttributeHook{}

	AddEventAttributeHook(boil.AfterSelectHook, eventAttributeAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	eventAttributeAfterSelectHooks = []EventAttributeHook{}

	AddEventAttributeHook(boil.BeforeUpdateHook, eventAttributeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	eventAttributeBeforeUpdateHooks = []EventAttributeHook{}

	AddEventAttributeHook(boil.AfterUpdateHook, eventAttributeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	eventAttributeAfterUpdateHooks = []EventAttributeHook{}

	AddEventAttributeHook(boil.BeforeDeleteHook, eventAttributeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	eventAttributeBeforeDeleteHooks = []EventAttributeHook{}

	AddEventAttributeHook(boil.AfterDeleteHook, eventAttributeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	eventAttributeAfterDeleteHooks = []EventAttributeHook{}

	AddEventAttributeHook(boil.BeforeUpsertHook, eventAttributeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	eventAttributeBeforeUpsertHooks = []EventAttributeHook{}

	AddEventAttributeHook(boil.AfterUpsertHook, eventAttributeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	eventAttributeAfterUpsertHooks = []EventAttributeHook{}
}

func testEventAttributesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventAttribute{}
	if err = randomize.Struct(seed, o, eventAttributeDBTypes, true, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EventAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEventAttributesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventAttribute{}
	if err = randomize.Struct(seed, o, eventAttributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(eventAttributeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := EventAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEventAttributeToOneEventUsingEvent(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local EventAttribute
	var foreign Event

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, eventAttributeDBTypes, false, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.EventID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Event().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EventAttributeSlice{&local}
	if err = local.L.LoadEvent(tx, false, (*[]*EventAttribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Event == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Event = nil
	if err = local.L.LoadEvent(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Event == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEventAttributeToOneAttributeUsingAttribute(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local EventAttribute
	var foreign Attribute

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, eventAttributeDBTypes, false, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AttributeID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Attribute().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EventAttributeSlice{&local}
	if err = local.L.LoadAttribute(tx, false, (*[]*EventAttribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Attribute == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Attribute = nil
	if err = local.L.LoadAttribute(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Attribute == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEventAttributeToOneSetOpEventUsingEvent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a EventAttribute
	var b, c Event

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventAttributeDBTypes, false, strmangle.SetComplement(eventAttributePrimaryKeyColumns, eventAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Event{&b, &c} {
		err = a.SetEvent(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Event != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EventAttributes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EventID != x.ID {
			t.Error("foreign key was wrong value", a.EventID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EventID))
		reflect.Indirect(reflect.ValueOf(&a.EventID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EventID != x.ID {
			t.Error("foreign key was wrong value", a.EventID, x.ID)
		}
	}
}
func testEventAttributeToOneSetOpAttributeUsingAttribute(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a EventAttribute
	var b, c Attribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventAttributeDBTypes, false, strmangle.SetComplement(eventAttributePrimaryKeyColumns, eventAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Attribute{&b, &c} {
		err = a.SetAttribute(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Attribute != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.EventAttributes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AttributeID != x.ID {
			t.Error("foreign key was wrong value", a.AttributeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AttributeID))
		reflect.Indirect(reflect.ValueOf(&a.AttributeID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AttributeID != x.ID {
			t.Error("foreign key was wrong value", a.AttributeID, x.ID)
		}
	}
}

func testEventAttributesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventAttribute{}
	if err = randomize.Struct(seed, o, eventAttributeDBTypes, true, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testEventAttributesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventAttribute{}
	if err = randomize.Struct(seed, o, eventAttributeDBTypes, true, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EventAttributeSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testEventAttributesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &EventAttribute{}
	if err = randomize.Struct(seed, o, eventAttributeDBTypes, true, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := EventAttributes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	eventAttributeDBTypes = map[string]string{`AttributeID`: `integer`, `EventID`: `integer`, `ID`: `integer`}
	_                     = bytes.MinRead
)

func testEventAttributesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(eventAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(eventAttributeColumns) == len(eventAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EventAttribute{}
	if err = randomize.Struct(seed, o, eventAttributeDBTypes, true, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EventAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, eventAttributeDBTypes, true, eventAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEventAttributesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(eventAttributeColumns) == len(eventAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &EventAttribute{}
	if err = randomize.Struct(seed, o, eventAttributeDBTypes, true, eventAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := EventAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, eventAttributeDBTypes, true, eventAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(eventAttributeColumns, eventAttributePrimaryKeyColumns) {
		fields = eventAttributeColumns
	} else {
		fields = strmangle.SetComplement(
			eventAttributeColumns,
			eventAttributePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EventAttributeSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEventAttributesUpsert(t *testing.T) {
	t.Parallel()

	if len(eventAttributeColumns) == len(eventAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := EventAttribute{}
	if err = randomize.Struct(seed, &o, eventAttributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EventAttribute: %s", err)
	}

	count, err := EventAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, eventAttributeDBTypes, false, eventAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize EventAttribute struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert EventAttribute: %s", err)
	}

	count, err = EventAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
