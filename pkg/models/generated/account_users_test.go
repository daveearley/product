// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAccountUsers(t *testing.T) {
	t.Parallel()

	query := AccountUsers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAccountUsersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountUser{}
	if err = randomize.Struct(seed, o, accountUserDBTypes, true, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountUsers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountUsersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountUser{}
	if err = randomize.Struct(seed, o, accountUserDBTypes, true, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := AccountUsers().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountUsers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountUsersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountUser{}
	if err = randomize.Struct(seed, o, accountUserDBTypes, true, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AccountUserSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := AccountUsers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAccountUsersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountUser{}
	if err = randomize.Struct(seed, o, accountUserDBTypes, true, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AccountUserExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if AccountUser exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AccountUserExists to return true, but got false.")
	}
}

func testAccountUsersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountUser{}
	if err = randomize.Struct(seed, o, accountUserDBTypes, true, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	accountUserFound, err := FindAccountUser(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if accountUserFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAccountUsersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountUser{}
	if err = randomize.Struct(seed, o, accountUserDBTypes, true, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = AccountUsers().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testAccountUsersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountUser{}
	if err = randomize.Struct(seed, o, accountUserDBTypes, true, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := AccountUsers().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAccountUsersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	accountUserOne := &AccountUser{}
	accountUserTwo := &AccountUser{}
	if err = randomize.Struct(seed, accountUserOne, accountUserDBTypes, false, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}
	if err = randomize.Struct(seed, accountUserTwo, accountUserDBTypes, false, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = accountUserOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = accountUserTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AccountUsers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAccountUsersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	accountUserOne := &AccountUser{}
	accountUserTwo := &AccountUser{}
	if err = randomize.Struct(seed, accountUserOne, accountUserDBTypes, false, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}
	if err = randomize.Struct(seed, accountUserTwo, accountUserDBTypes, false, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = accountUserOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = accountUserTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccountUsers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func accountUserBeforeInsertHook(e boil.Executor, o *AccountUser) error {
	*o = AccountUser{}
	return nil
}

func accountUserAfterInsertHook(e boil.Executor, o *AccountUser) error {
	*o = AccountUser{}
	return nil
}

func accountUserAfterSelectHook(e boil.Executor, o *AccountUser) error {
	*o = AccountUser{}
	return nil
}

func accountUserBeforeUpdateHook(e boil.Executor, o *AccountUser) error {
	*o = AccountUser{}
	return nil
}

func accountUserAfterUpdateHook(e boil.Executor, o *AccountUser) error {
	*o = AccountUser{}
	return nil
}

func accountUserBeforeDeleteHook(e boil.Executor, o *AccountUser) error {
	*o = AccountUser{}
	return nil
}

func accountUserAfterDeleteHook(e boil.Executor, o *AccountUser) error {
	*o = AccountUser{}
	return nil
}

func accountUserBeforeUpsertHook(e boil.Executor, o *AccountUser) error {
	*o = AccountUser{}
	return nil
}

func accountUserAfterUpsertHook(e boil.Executor, o *AccountUser) error {
	*o = AccountUser{}
	return nil
}

func testAccountUsersHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &AccountUser{}
	o := &AccountUser{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, accountUserDBTypes, false); err != nil {
		t.Errorf("Unable to randomize AccountUser object: %s", err)
	}

	AddAccountUserHook(boil.BeforeInsertHook, accountUserBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	accountUserBeforeInsertHooks = []AccountUserHook{}

	AddAccountUserHook(boil.AfterInsertHook, accountUserAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	accountUserAfterInsertHooks = []AccountUserHook{}

	AddAccountUserHook(boil.AfterSelectHook, accountUserAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	accountUserAfterSelectHooks = []AccountUserHook{}

	AddAccountUserHook(boil.BeforeUpdateHook, accountUserBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	accountUserBeforeUpdateHooks = []AccountUserHook{}

	AddAccountUserHook(boil.AfterUpdateHook, accountUserAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	accountUserAfterUpdateHooks = []AccountUserHook{}

	AddAccountUserHook(boil.BeforeDeleteHook, accountUserBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	accountUserBeforeDeleteHooks = []AccountUserHook{}

	AddAccountUserHook(boil.AfterDeleteHook, accountUserAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	accountUserAfterDeleteHooks = []AccountUserHook{}

	AddAccountUserHook(boil.BeforeUpsertHook, accountUserBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	accountUserBeforeUpsertHooks = []AccountUserHook{}

	AddAccountUserHook(boil.AfterUpsertHook, accountUserAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	accountUserAfterUpsertHooks = []AccountUserHook{}
}

func testAccountUsersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountUser{}
	if err = randomize.Struct(seed, o, accountUserDBTypes, true, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccountUsers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAccountUsersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountUser{}
	if err = randomize.Struct(seed, o, accountUserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(accountUserColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := AccountUsers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAccountUserToManyUserEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AccountUser
	var b, c Event

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, accountUserDBTypes, true, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.UserID = a.ID
	c.UserID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	event, err := a.UserEvents().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range event {
		if v.UserID == b.UserID {
			bFound = true
		}
		if v.UserID == c.UserID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AccountUserSlice{&a}
	if err = a.L.LoadUserEvents(tx, false, (*[]*AccountUser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserEvents = nil
	if err = a.L.LoadUserEvents(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserEvents); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", event)
	}
}

func testAccountUserToManyAddOpUserEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AccountUser
	var b, c, d, e Event

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, accountUserDBTypes, false, strmangle.SetComplement(accountUserPrimaryKeyColumns, accountUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Event{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Event{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserEvents(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.UserID {
			t.Error("foreign key was wrong value", a.ID, first.UserID)
		}
		if a.ID != second.UserID {
			t.Error("foreign key was wrong value", a.ID, second.UserID)
		}

		if first.R.User != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.User != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserEvents[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserEvents[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserEvents().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testAccountUserToOneAccountUsingAccount(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local AccountUser
	var foreign Account

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, accountUserDBTypes, false, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, accountDBTypes, false, accountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AccountID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Account().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := AccountUserSlice{&local}
	if err = local.L.LoadAccount(tx, false, (*[]*AccountUser)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Account = nil
	if err = local.L.LoadAccount(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testAccountUserToOneSetOpAccountUsingAccount(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a AccountUser
	var b, c Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, accountUserDBTypes, false, strmangle.SetComplement(accountUserPrimaryKeyColumns, accountUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetAccount(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Account != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.AccountUsers[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AccountID != x.ID {
			t.Error("foreign key was wrong value", a.AccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AccountID))
		reflect.Indirect(reflect.ValueOf(&a.AccountID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AccountID != x.ID {
			t.Error("foreign key was wrong value", a.AccountID, x.ID)
		}
	}
}

func testAccountUsersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountUser{}
	if err = randomize.Struct(seed, o, accountUserDBTypes, true, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAccountUsersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountUser{}
	if err = randomize.Struct(seed, o, accountUserDBTypes, true, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AccountUserSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testAccountUsersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &AccountUser{}
	if err = randomize.Struct(seed, o, accountUserDBTypes, true, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := AccountUsers().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	accountUserDBTypes = map[string]string{`AccountID`: `integer`, `CreatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`, `Email`: `character varying`, `FirstName`: `character varying`, `ID`: `integer`, `LastName`: `character varying`, `Password`: `character varying`, `Status`: `enum.account_user_status('ACTIVE')`, `UpdatedAt`: `timestamp without time zone`}
	_                  = bytes.MinRead
)

func testAccountUsersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(accountUserPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(accountUserColumns) == len(accountUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AccountUser{}
	if err = randomize.Struct(seed, o, accountUserDBTypes, true, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccountUsers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, accountUserDBTypes, true, accountUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAccountUsersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(accountUserColumns) == len(accountUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &AccountUser{}
	if err = randomize.Struct(seed, o, accountUserDBTypes, true, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := AccountUsers().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, accountUserDBTypes, true, accountUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(accountUserColumns, accountUserPrimaryKeyColumns) {
		fields = accountUserColumns
	} else {
		fields = strmangle.SetComplement(
			accountUserColumns,
			accountUserPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AccountUserSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAccountUsersUpsert(t *testing.T) {
	t.Parallel()

	if len(accountUserColumns) == len(accountUserPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := AccountUser{}
	if err = randomize.Struct(seed, &o, accountUserDBTypes, true); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AccountUser: %s", err)
	}

	count, err := AccountUsers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, accountUserDBTypes, false, accountUserPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert AccountUser: %s", err)
	}

	count, err = AccountUsers().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
