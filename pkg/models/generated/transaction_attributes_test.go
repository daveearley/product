// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTransactionAttributes(t *testing.T) {
	t.Parallel()

	query := TransactionAttributes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTransactionAttributesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAttribute{}
	if err = randomize.Struct(seed, o, transactionAttributeDBTypes, true, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TransactionAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTransactionAttributesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAttribute{}
	if err = randomize.Struct(seed, o, transactionAttributeDBTypes, true, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TransactionAttributes().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TransactionAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTransactionAttributesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAttribute{}
	if err = randomize.Struct(seed, o, transactionAttributeDBTypes, true, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TransactionAttributeSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TransactionAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTransactionAttributesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAttribute{}
	if err = randomize.Struct(seed, o, transactionAttributeDBTypes, true, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TransactionAttributeExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TransactionAttribute exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TransactionAttributeExists to return true, but got false.")
	}
}

func testTransactionAttributesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAttribute{}
	if err = randomize.Struct(seed, o, transactionAttributeDBTypes, true, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	transactionAttributeFound, err := FindTransactionAttribute(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if transactionAttributeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTransactionAttributesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAttribute{}
	if err = randomize.Struct(seed, o, transactionAttributeDBTypes, true, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TransactionAttributes().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testTransactionAttributesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAttribute{}
	if err = randomize.Struct(seed, o, transactionAttributeDBTypes, true, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TransactionAttributes().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTransactionAttributesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	transactionAttributeOne := &TransactionAttribute{}
	transactionAttributeTwo := &TransactionAttribute{}
	if err = randomize.Struct(seed, transactionAttributeOne, transactionAttributeDBTypes, false, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}
	if err = randomize.Struct(seed, transactionAttributeTwo, transactionAttributeDBTypes, false, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = transactionAttributeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = transactionAttributeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TransactionAttributes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTransactionAttributesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	transactionAttributeOne := &TransactionAttribute{}
	transactionAttributeTwo := &TransactionAttribute{}
	if err = randomize.Struct(seed, transactionAttributeOne, transactionAttributeDBTypes, false, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}
	if err = randomize.Struct(seed, transactionAttributeTwo, transactionAttributeDBTypes, false, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = transactionAttributeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = transactionAttributeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TransactionAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func transactionAttributeBeforeInsertHook(e boil.Executor, o *TransactionAttribute) error {
	*o = TransactionAttribute{}
	return nil
}

func transactionAttributeAfterInsertHook(e boil.Executor, o *TransactionAttribute) error {
	*o = TransactionAttribute{}
	return nil
}

func transactionAttributeAfterSelectHook(e boil.Executor, o *TransactionAttribute) error {
	*o = TransactionAttribute{}
	return nil
}

func transactionAttributeBeforeUpdateHook(e boil.Executor, o *TransactionAttribute) error {
	*o = TransactionAttribute{}
	return nil
}

func transactionAttributeAfterUpdateHook(e boil.Executor, o *TransactionAttribute) error {
	*o = TransactionAttribute{}
	return nil
}

func transactionAttributeBeforeDeleteHook(e boil.Executor, o *TransactionAttribute) error {
	*o = TransactionAttribute{}
	return nil
}

func transactionAttributeAfterDeleteHook(e boil.Executor, o *TransactionAttribute) error {
	*o = TransactionAttribute{}
	return nil
}

func transactionAttributeBeforeUpsertHook(e boil.Executor, o *TransactionAttribute) error {
	*o = TransactionAttribute{}
	return nil
}

func transactionAttributeAfterUpsertHook(e boil.Executor, o *TransactionAttribute) error {
	*o = TransactionAttribute{}
	return nil
}

func testTransactionAttributesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &TransactionAttribute{}
	o := &TransactionAttribute{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, transactionAttributeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute object: %s", err)
	}

	AddTransactionAttributeHook(boil.BeforeInsertHook, transactionAttributeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	transactionAttributeBeforeInsertHooks = []TransactionAttributeHook{}

	AddTransactionAttributeHook(boil.AfterInsertHook, transactionAttributeAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	transactionAttributeAfterInsertHooks = []TransactionAttributeHook{}

	AddTransactionAttributeHook(boil.AfterSelectHook, transactionAttributeAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	transactionAttributeAfterSelectHooks = []TransactionAttributeHook{}

	AddTransactionAttributeHook(boil.BeforeUpdateHook, transactionAttributeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	transactionAttributeBeforeUpdateHooks = []TransactionAttributeHook{}

	AddTransactionAttributeHook(boil.AfterUpdateHook, transactionAttributeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	transactionAttributeAfterUpdateHooks = []TransactionAttributeHook{}

	AddTransactionAttributeHook(boil.BeforeDeleteHook, transactionAttributeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	transactionAttributeBeforeDeleteHooks = []TransactionAttributeHook{}

	AddTransactionAttributeHook(boil.AfterDeleteHook, transactionAttributeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	transactionAttributeAfterDeleteHooks = []TransactionAttributeHook{}

	AddTransactionAttributeHook(boil.BeforeUpsertHook, transactionAttributeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	transactionAttributeBeforeUpsertHooks = []TransactionAttributeHook{}

	AddTransactionAttributeHook(boil.AfterUpsertHook, transactionAttributeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	transactionAttributeAfterUpsertHooks = []TransactionAttributeHook{}
}

func testTransactionAttributesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAttribute{}
	if err = randomize.Struct(seed, o, transactionAttributeDBTypes, true, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TransactionAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTransactionAttributesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAttribute{}
	if err = randomize.Struct(seed, o, transactionAttributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(transactionAttributeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TransactionAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTransactionAttributeToOneTransactionUsingTransaction(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TransactionAttribute
	var foreign Transaction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, transactionAttributeDBTypes, false, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Transaction struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TransactionID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Transaction().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TransactionAttributeSlice{&local}
	if err = local.L.LoadTransaction(tx, false, (*[]*TransactionAttribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Transaction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Transaction = nil
	if err = local.L.LoadTransaction(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Transaction == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTransactionAttributeToOneAttributeUsingAttribute(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TransactionAttribute
	var foreign Attribute

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, transactionAttributeDBTypes, false, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AttributeID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Attribute().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TransactionAttributeSlice{&local}
	if err = local.L.LoadAttribute(tx, false, (*[]*TransactionAttribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Attribute == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Attribute = nil
	if err = local.L.LoadAttribute(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Attribute == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTransactionAttributeToOneSetOpTransactionUsingTransaction(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TransactionAttribute
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, transactionAttributeDBTypes, false, strmangle.SetComplement(transactionAttributePrimaryKeyColumns, transactionAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Transaction{&b, &c} {
		err = a.SetTransaction(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Transaction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TransactionAttributes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TransactionID != x.ID {
			t.Error("foreign key was wrong value", a.TransactionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TransactionID))
		reflect.Indirect(reflect.ValueOf(&a.TransactionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TransactionID != x.ID {
			t.Error("foreign key was wrong value", a.TransactionID, x.ID)
		}
	}
}
func testTransactionAttributeToOneSetOpAttributeUsingAttribute(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TransactionAttribute
	var b, c Attribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, transactionAttributeDBTypes, false, strmangle.SetComplement(transactionAttributePrimaryKeyColumns, transactionAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Attribute{&b, &c} {
		err = a.SetAttribute(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Attribute != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TransactionAttributes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AttributeID != x.ID {
			t.Error("foreign key was wrong value", a.AttributeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AttributeID))
		reflect.Indirect(reflect.ValueOf(&a.AttributeID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AttributeID != x.ID {
			t.Error("foreign key was wrong value", a.AttributeID, x.ID)
		}
	}
}

func testTransactionAttributesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAttribute{}
	if err = randomize.Struct(seed, o, transactionAttributeDBTypes, true, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTransactionAttributesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAttribute{}
	if err = randomize.Struct(seed, o, transactionAttributeDBTypes, true, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TransactionAttributeSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testTransactionAttributesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAttribute{}
	if err = randomize.Struct(seed, o, transactionAttributeDBTypes, true, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TransactionAttributes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	transactionAttributeDBTypes = map[string]string{`AttributeID`: `integer`, `ID`: `integer`, `TransactionID`: `integer`}
	_                           = bytes.MinRead
)

func testTransactionAttributesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(transactionAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(transactionAttributeColumns) == len(transactionAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAttribute{}
	if err = randomize.Struct(seed, o, transactionAttributeDBTypes, true, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TransactionAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, transactionAttributeDBTypes, true, transactionAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTransactionAttributesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(transactionAttributeColumns) == len(transactionAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TransactionAttribute{}
	if err = randomize.Struct(seed, o, transactionAttributeDBTypes, true, transactionAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TransactionAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, transactionAttributeDBTypes, true, transactionAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(transactionAttributeColumns, transactionAttributePrimaryKeyColumns) {
		fields = transactionAttributeColumns
	} else {
		fields = strmangle.SetComplement(
			transactionAttributeColumns,
			transactionAttributePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TransactionAttributeSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTransactionAttributesUpsert(t *testing.T) {
	t.Parallel()

	if len(transactionAttributeColumns) == len(transactionAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TransactionAttribute{}
	if err = randomize.Struct(seed, &o, transactionAttributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TransactionAttribute: %s", err)
	}

	count, err := TransactionAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, transactionAttributeDBTypes, false, transactionAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TransactionAttribute struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TransactionAttribute: %s", err)
	}

	count, err = TransactionAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
