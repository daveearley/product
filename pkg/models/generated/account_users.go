// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// AccountUser is an object representing the database table.
type AccountUser struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	FirstName string    `boil:"first_name" json:"first_name" toml:"first_name" yaml:"first_name"`
	LastName  string    `boil:"last_name" json:"last_name" toml:"last_name" yaml:"last_name"`
	Email     string    `boil:"email" json:"email" toml:"email" yaml:"email"`
	Password  string    `boil:"password" json:"password" toml:"password" yaml:"password"`
	Status    string    `boil:"status" json:"status" toml:"status" yaml:"status"`
	AccountID int       `boil:"account_id" json:"account_id" toml:"account_id" yaml:"account_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt time.Time `boil:"deleted_at" json:"deleted_at" toml:"deleted_at" yaml:"deleted_at"`

	R *accountUserR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L accountUserL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AccountUserColumns = struct {
	ID        string
	FirstName string
	LastName  string
	Email     string
	Password  string
	Status    string
	AccountID string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	FirstName: "first_name",
	LastName:  "last_name",
	Email:     "email",
	Password:  "password",
	Status:    "status",
	AccountID: "account_id",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

// AccountUserRels is where relationship names are stored.
var AccountUserRels = struct {
	Account    string
	UserEvents string
}{
	Account:    "Account",
	UserEvents: "UserEvents",
}

// accountUserR is where relationships are stored.
type accountUserR struct {
	Account    *Account
	UserEvents EventSlice
}

// NewStruct creates a new relationship struct
func (*accountUserR) NewStruct() *accountUserR {
	return &accountUserR{}
}

// accountUserL is where Load methods for each relationship are stored.
type accountUserL struct{}

var (
	accountUserColumns               = []string{"id", "first_name", "last_name", "email", "password", "status", "account_id", "created_at", "updated_at", "deleted_at"}
	accountUserColumnsWithoutDefault = []string{"first_name", "last_name", "email", "password", "status", "account_id", "created_at", "updated_at", "deleted_at"}
	accountUserColumnsWithDefault    = []string{"id"}
	accountUserPrimaryKeyColumns     = []string{"id"}
)

type (
	// AccountUserSlice is an alias for a slice of pointers to AccountUser.
	// This should generally be used opposed to []AccountUser.
	AccountUserSlice []*AccountUser
	// AccountUserHook is the signature for custom AccountUser hook methods
	AccountUserHook func(boil.Executor, *AccountUser) error

	accountUserQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	accountUserType                 = reflect.TypeOf(&AccountUser{})
	accountUserMapping              = queries.MakeStructMapping(accountUserType)
	accountUserPrimaryKeyMapping, _ = queries.BindMapping(accountUserType, accountUserMapping, accountUserPrimaryKeyColumns)
	accountUserInsertCacheMut       sync.RWMutex
	accountUserInsertCache          = make(map[string]insertCache)
	accountUserUpdateCacheMut       sync.RWMutex
	accountUserUpdateCache          = make(map[string]updateCache)
	accountUserUpsertCacheMut       sync.RWMutex
	accountUserUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var accountUserBeforeInsertHooks []AccountUserHook
var accountUserBeforeUpdateHooks []AccountUserHook
var accountUserBeforeDeleteHooks []AccountUserHook
var accountUserBeforeUpsertHooks []AccountUserHook

var accountUserAfterInsertHooks []AccountUserHook
var accountUserAfterSelectHooks []AccountUserHook
var accountUserAfterUpdateHooks []AccountUserHook
var accountUserAfterDeleteHooks []AccountUserHook
var accountUserAfterUpsertHooks []AccountUserHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *AccountUser) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accountUserBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *AccountUser) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range accountUserBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *AccountUser) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range accountUserBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *AccountUser) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accountUserBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *AccountUser) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accountUserAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *AccountUser) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range accountUserAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *AccountUser) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range accountUserAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *AccountUser) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range accountUserAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *AccountUser) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range accountUserAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAccountUserHook registers your hook function for all future operations.
func AddAccountUserHook(hookPoint boil.HookPoint, accountUserHook AccountUserHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		accountUserBeforeInsertHooks = append(accountUserBeforeInsertHooks, accountUserHook)
	case boil.BeforeUpdateHook:
		accountUserBeforeUpdateHooks = append(accountUserBeforeUpdateHooks, accountUserHook)
	case boil.BeforeDeleteHook:
		accountUserBeforeDeleteHooks = append(accountUserBeforeDeleteHooks, accountUserHook)
	case boil.BeforeUpsertHook:
		accountUserBeforeUpsertHooks = append(accountUserBeforeUpsertHooks, accountUserHook)
	case boil.AfterInsertHook:
		accountUserAfterInsertHooks = append(accountUserAfterInsertHooks, accountUserHook)
	case boil.AfterSelectHook:
		accountUserAfterSelectHooks = append(accountUserAfterSelectHooks, accountUserHook)
	case boil.AfterUpdateHook:
		accountUserAfterUpdateHooks = append(accountUserAfterUpdateHooks, accountUserHook)
	case boil.AfterDeleteHook:
		accountUserAfterDeleteHooks = append(accountUserAfterDeleteHooks, accountUserHook)
	case boil.AfterUpsertHook:
		accountUserAfterUpsertHooks = append(accountUserAfterUpsertHooks, accountUserHook)
	}
}

// One returns a single accountUser record from the query.
func (q accountUserQuery) One(exec boil.Executor) (*AccountUser, error) {
	o := &AccountUser{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for account_users")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all AccountUser records from the query.
func (q accountUserQuery) All(exec boil.Executor) (AccountUserSlice, error) {
	var o []*AccountUser

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to AccountUser slice")
	}

	if len(accountUserAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all AccountUser records in the query.
func (q accountUserQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count account_users rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q accountUserQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if account_users exists")
	}

	return count > 0, nil
}

// Account pointed to by the foreign key.
func (o *AccountUser) Account(mods ...qm.QueryMod) accountQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.AccountID),
	}

	queryMods = append(queryMods, mods...)

	query := Accounts(queryMods...)
	queries.SetFrom(query.Query, "\"accounts\"")

	return query
}

// UserEvents retrieves all the event's Events with an executor via user_id column.
func (o *AccountUser) UserEvents(mods ...qm.QueryMod) eventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"events\".\"user_id\"=?", o.ID),
	)

	query := Events(queryMods...)
	queries.SetFrom(query.Query, "\"events\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"events\".*"})
	}

	return query
}

// LoadAccount allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (accountUserL) LoadAccount(e boil.Executor, singular bool, maybeAccountUser interface{}, mods queries.Applicator) error {
	var slice []*AccountUser
	var object *AccountUser

	if singular {
		object = maybeAccountUser.(*AccountUser)
	} else {
		slice = *maybeAccountUser.(*[]*AccountUser)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &accountUserR{}
		}
		args = append(args, object.AccountID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountUserR{}
			}

			for _, a := range args {
				if a == obj.AccountID {
					continue Outer
				}
			}

			args = append(args, obj.AccountID)
		}
	}

	query := NewQuery(qm.From(`accounts`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Account")
	}

	var resultSlice []*Account
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Account")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for accounts")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for accounts")
	}

	if len(accountUserAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Account = foreign
		if foreign.R == nil {
			foreign.R = &accountR{}
		}
		foreign.R.AccountUsers = append(foreign.R.AccountUsers, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AccountID == foreign.ID {
				local.R.Account = foreign
				if foreign.R == nil {
					foreign.R = &accountR{}
				}
				foreign.R.AccountUsers = append(foreign.R.AccountUsers, local)
				break
			}
		}
	}

	return nil
}

// LoadUserEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (accountUserL) LoadUserEvents(e boil.Executor, singular bool, maybeAccountUser interface{}, mods queries.Applicator) error {
	var slice []*AccountUser
	var object *AccountUser

	if singular {
		object = maybeAccountUser.(*AccountUser)
	} else {
		slice = *maybeAccountUser.(*[]*AccountUser)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &accountUserR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &accountUserR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`events`), qm.WhereIn(`user_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load events")
	}

	var resultSlice []*Event
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice events")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for events")
	}

	if len(eventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.UserEvents = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &eventR{}
			}
			foreign.R.User = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.UserID {
				local.R.UserEvents = append(local.R.UserEvents, foreign)
				if foreign.R == nil {
					foreign.R = &eventR{}
				}
				foreign.R.User = local
				break
			}
		}
	}

	return nil
}

// SetAccount of the accountUser to the related item.
// Sets o.R.Account to related.
// Adds o to related.R.AccountUsers.
func (o *AccountUser) SetAccount(exec boil.Executor, insert bool, related *Account) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"account_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"account_id"}),
		strmangle.WhereClause("\"", "\"", 2, accountUserPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AccountID = related.ID
	if o.R == nil {
		o.R = &accountUserR{
			Account: related,
		}
	} else {
		o.R.Account = related
	}

	if related.R == nil {
		related.R = &accountR{
			AccountUsers: AccountUserSlice{o},
		}
	} else {
		related.R.AccountUsers = append(related.R.AccountUsers, o)
	}

	return nil
}

// AddUserEvents adds the given related objects to the existing relationships
// of the account_user, optionally inserting them as new records.
// Appends related to o.R.UserEvents.
// Sets related.R.User appropriately.
func (o *AccountUser) AddUserEvents(exec boil.Executor, insert bool, related ...*Event) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.UserID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"events\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
				strmangle.WhereClause("\"", "\"", 2, eventPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.UserID = o.ID
		}
	}

	if o.R == nil {
		o.R = &accountUserR{
			UserEvents: related,
		}
	} else {
		o.R.UserEvents = append(o.R.UserEvents, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &eventR{
				User: o,
			}
		} else {
			rel.R.User = o
		}
	}
	return nil
}

// AccountUsers retrieves all the records using an executor.
func AccountUsers(mods ...qm.QueryMod) accountUserQuery {
	mods = append(mods, qm.From("\"account_users\""))
	return accountUserQuery{NewQuery(mods...)}
}

// FindAccountUser retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAccountUser(exec boil.Executor, iD int, selectCols ...string) (*AccountUser, error) {
	accountUserObj := &AccountUser{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"account_users\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, accountUserObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from account_users")
	}

	return accountUserObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *AccountUser) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no account_users provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountUserColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	accountUserInsertCacheMut.RLock()
	cache, cached := accountUserInsertCache[key]
	accountUserInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			accountUserColumns,
			accountUserColumnsWithDefault,
			accountUserColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(accountUserType, accountUserMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(accountUserType, accountUserMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"account_users\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"account_users\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into account_users")
	}

	if !cached {
		accountUserInsertCacheMut.Lock()
		accountUserInsertCache[key] = cache
		accountUserInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the AccountUser.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *AccountUser) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	accountUserUpdateCacheMut.RLock()
	cache, cached := accountUserUpdateCache[key]
	accountUserUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			accountUserColumns,
			accountUserPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update account_users, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"account_users\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, accountUserPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(accountUserType, accountUserMapping, append(wl, accountUserPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update account_users row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for account_users")
	}

	if !cached {
		accountUserUpdateCacheMut.Lock()
		accountUserUpdateCache[key] = cache
		accountUserUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q accountUserQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for account_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for account_users")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AccountUserSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"account_users\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, accountUserPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in accountUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all accountUser")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *AccountUser) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no account_users provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(accountUserColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	accountUserUpsertCacheMut.RLock()
	cache, cached := accountUserUpsertCache[key]
	accountUserUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			accountUserColumns,
			accountUserColumnsWithDefault,
			accountUserColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			accountUserColumns,
			accountUserPrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert account_users, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(accountUserPrimaryKeyColumns))
			copy(conflict, accountUserPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"account_users\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(accountUserType, accountUserMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(accountUserType, accountUserMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert account_users")
	}

	if !cached {
		accountUserUpsertCacheMut.Lock()
		accountUserUpsertCache[key] = cache
		accountUserUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single AccountUser record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *AccountUser) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AccountUser provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), accountUserPrimaryKeyMapping)
	sql := "DELETE FROM \"account_users\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from account_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for account_users")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q accountUserQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no accountUserQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from account_users")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for account_users")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AccountUserSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no AccountUser slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(accountUserBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"account_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountUserPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from accountUser slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for account_users")
	}

	if len(accountUserAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *AccountUser) Reload(exec boil.Executor) error {
	ret, err := FindAccountUser(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AccountUserSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AccountUserSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), accountUserPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"account_users\".* FROM \"account_users\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, accountUserPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AccountUserSlice")
	}

	*o = slice

	return nil
}

// AccountUserExists checks if the AccountUser row exists.
func AccountUserExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"account_users\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if account_users exists")
	}

	return exists, nil
}
