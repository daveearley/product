// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// TransactionAttribute is an object representing the database table.
type TransactionAttribute struct {
	ID            int `boil:"id" json:"id" toml:"id" yaml:"id"`
	TransactionID int `boil:"transaction_id" json:"transaction_id" toml:"transaction_id" yaml:"transaction_id"`
	AttributeID   int `boil:"attribute_id" json:"attribute_id" toml:"attribute_id" yaml:"attribute_id"`

	R *transactionAttributeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L transactionAttributeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var TransactionAttributeColumns = struct {
	ID            string
	TransactionID string
	AttributeID   string
}{
	ID:            "id",
	TransactionID: "transaction_id",
	AttributeID:   "attribute_id",
}

// TransactionAttributeRels is where relationship names are stored.
var TransactionAttributeRels = struct {
	Transaction string
	Attribute   string
}{
	Transaction: "Transaction",
	Attribute:   "Attribute",
}

// transactionAttributeR is where relationships are stored.
type transactionAttributeR struct {
	Transaction *Transaction
	Attribute   *Attribute
}

// NewStruct creates a new relationship struct
func (*transactionAttributeR) NewStruct() *transactionAttributeR {
	return &transactionAttributeR{}
}

// transactionAttributeL is where Load methods for each relationship are stored.
type transactionAttributeL struct{}

var (
	transactionAttributeColumns               = []string{"id", "transaction_id", "attribute_id"}
	transactionAttributeColumnsWithoutDefault = []string{"transaction_id", "attribute_id"}
	transactionAttributeColumnsWithDefault    = []string{"id"}
	transactionAttributePrimaryKeyColumns     = []string{"id"}
)

type (
	// TransactionAttributeSlice is an alias for a slice of pointers to TransactionAttribute.
	// This should generally be used opposed to []TransactionAttribute.
	TransactionAttributeSlice []*TransactionAttribute
	// TransactionAttributeHook is the signature for custom TransactionAttribute hook methods
	TransactionAttributeHook func(boil.Executor, *TransactionAttribute) error

	transactionAttributeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	transactionAttributeType                 = reflect.TypeOf(&TransactionAttribute{})
	transactionAttributeMapping              = queries.MakeStructMapping(transactionAttributeType)
	transactionAttributePrimaryKeyMapping, _ = queries.BindMapping(transactionAttributeType, transactionAttributeMapping, transactionAttributePrimaryKeyColumns)
	transactionAttributeInsertCacheMut       sync.RWMutex
	transactionAttributeInsertCache          = make(map[string]insertCache)
	transactionAttributeUpdateCacheMut       sync.RWMutex
	transactionAttributeUpdateCache          = make(map[string]updateCache)
	transactionAttributeUpsertCacheMut       sync.RWMutex
	transactionAttributeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var transactionAttributeBeforeInsertHooks []TransactionAttributeHook
var transactionAttributeBeforeUpdateHooks []TransactionAttributeHook
var transactionAttributeBeforeDeleteHooks []TransactionAttributeHook
var transactionAttributeBeforeUpsertHooks []TransactionAttributeHook

var transactionAttributeAfterInsertHooks []TransactionAttributeHook
var transactionAttributeAfterSelectHooks []TransactionAttributeHook
var transactionAttributeAfterUpdateHooks []TransactionAttributeHook
var transactionAttributeAfterDeleteHooks []TransactionAttributeHook
var transactionAttributeAfterUpsertHooks []TransactionAttributeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *TransactionAttribute) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAttributeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *TransactionAttribute) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAttributeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *TransactionAttribute) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAttributeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *TransactionAttribute) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAttributeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *TransactionAttribute) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAttributeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *TransactionAttribute) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAttributeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *TransactionAttribute) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAttributeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *TransactionAttribute) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAttributeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *TransactionAttribute) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range transactionAttributeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddTransactionAttributeHook registers your hook function for all future operations.
func AddTransactionAttributeHook(hookPoint boil.HookPoint, transactionAttributeHook TransactionAttributeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		transactionAttributeBeforeInsertHooks = append(transactionAttributeBeforeInsertHooks, transactionAttributeHook)
	case boil.BeforeUpdateHook:
		transactionAttributeBeforeUpdateHooks = append(transactionAttributeBeforeUpdateHooks, transactionAttributeHook)
	case boil.BeforeDeleteHook:
		transactionAttributeBeforeDeleteHooks = append(transactionAttributeBeforeDeleteHooks, transactionAttributeHook)
	case boil.BeforeUpsertHook:
		transactionAttributeBeforeUpsertHooks = append(transactionAttributeBeforeUpsertHooks, transactionAttributeHook)
	case boil.AfterInsertHook:
		transactionAttributeAfterInsertHooks = append(transactionAttributeAfterInsertHooks, transactionAttributeHook)
	case boil.AfterSelectHook:
		transactionAttributeAfterSelectHooks = append(transactionAttributeAfterSelectHooks, transactionAttributeHook)
	case boil.AfterUpdateHook:
		transactionAttributeAfterUpdateHooks = append(transactionAttributeAfterUpdateHooks, transactionAttributeHook)
	case boil.AfterDeleteHook:
		transactionAttributeAfterDeleteHooks = append(transactionAttributeAfterDeleteHooks, transactionAttributeHook)
	case boil.AfterUpsertHook:
		transactionAttributeAfterUpsertHooks = append(transactionAttributeAfterUpsertHooks, transactionAttributeHook)
	}
}

// One returns a single transactionAttribute record from the query.
func (q transactionAttributeQuery) One(exec boil.Executor) (*TransactionAttribute, error) {
	o := &TransactionAttribute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for transaction_attributes")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all TransactionAttribute records from the query.
func (q transactionAttributeQuery) All(exec boil.Executor) (TransactionAttributeSlice, error) {
	var o []*TransactionAttribute

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to TransactionAttribute slice")
	}

	if len(transactionAttributeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all TransactionAttribute records in the query.
func (q transactionAttributeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count transaction_attributes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q transactionAttributeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if transaction_attributes exists")
	}

	return count > 0, nil
}

// Transaction pointed to by the foreign key.
func (o *TransactionAttribute) Transaction(mods ...qm.QueryMod) transactionQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.TransactionID),
	}

	queryMods = append(queryMods, mods...)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "\"transactions\"")

	return query
}

// Attribute pointed to by the foreign key.
func (o *TransactionAttribute) Attribute(mods ...qm.QueryMod) attributeQuery {
	queryMods := []qm.QueryMod{
		qm.Where("id=?", o.AttributeID),
	}

	queryMods = append(queryMods, mods...)

	query := Attributes(queryMods...)
	queries.SetFrom(query.Query, "\"attributes\"")

	return query
}

// LoadTransaction allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionAttributeL) LoadTransaction(e boil.Executor, singular bool, maybeTransactionAttribute interface{}, mods queries.Applicator) error {
	var slice []*TransactionAttribute
	var object *TransactionAttribute

	if singular {
		object = maybeTransactionAttribute.(*TransactionAttribute)
	} else {
		slice = *maybeTransactionAttribute.(*[]*TransactionAttribute)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionAttributeR{}
		}
		args = append(args, object.TransactionID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionAttributeR{}
			}

			for _, a := range args {
				if a == obj.TransactionID {
					continue Outer
				}
			}

			args = append(args, obj.TransactionID)
		}
	}

	query := NewQuery(qm.From(`transactions`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Transaction")
	}

	var resultSlice []*Transaction
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Transaction")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(transactionAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Transaction = foreign
		if foreign.R == nil {
			foreign.R = &transactionR{}
		}
		foreign.R.TransactionAttributes = append(foreign.R.TransactionAttributes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TransactionID == foreign.ID {
				local.R.Transaction = foreign
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.TransactionAttributes = append(foreign.R.TransactionAttributes, local)
				break
			}
		}
	}

	return nil
}

// LoadAttribute allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (transactionAttributeL) LoadAttribute(e boil.Executor, singular bool, maybeTransactionAttribute interface{}, mods queries.Applicator) error {
	var slice []*TransactionAttribute
	var object *TransactionAttribute

	if singular {
		object = maybeTransactionAttribute.(*TransactionAttribute)
	} else {
		slice = *maybeTransactionAttribute.(*[]*TransactionAttribute)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &transactionAttributeR{}
		}
		args = append(args, object.AttributeID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &transactionAttributeR{}
			}

			for _, a := range args {
				if a == obj.AttributeID {
					continue Outer
				}
			}

			args = append(args, obj.AttributeID)
		}
	}

	query := NewQuery(qm.From(`attributes`), qm.WhereIn(`id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Attribute")
	}

	var resultSlice []*Attribute
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Attribute")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for attributes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for attributes")
	}

	if len(transactionAttributeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Attribute = foreign
		if foreign.R == nil {
			foreign.R = &attributeR{}
		}
		foreign.R.TransactionAttributes = append(foreign.R.TransactionAttributes, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.AttributeID == foreign.ID {
				local.R.Attribute = foreign
				if foreign.R == nil {
					foreign.R = &attributeR{}
				}
				foreign.R.TransactionAttributes = append(foreign.R.TransactionAttributes, local)
				break
			}
		}
	}

	return nil
}

// SetTransaction of the transactionAttribute to the related item.
// Sets o.R.Transaction to related.
// Adds o to related.R.TransactionAttributes.
func (o *TransactionAttribute) SetTransaction(exec boil.Executor, insert bool, related *Transaction) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transaction_attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"transaction_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TransactionID = related.ID
	if o.R == nil {
		o.R = &transactionAttributeR{
			Transaction: related,
		}
	} else {
		o.R.Transaction = related
	}

	if related.R == nil {
		related.R = &transactionR{
			TransactionAttributes: TransactionAttributeSlice{o},
		}
	} else {
		related.R.TransactionAttributes = append(related.R.TransactionAttributes, o)
	}

	return nil
}

// SetAttribute of the transactionAttribute to the related item.
// Sets o.R.Attribute to related.
// Adds o to related.R.TransactionAttributes.
func (o *TransactionAttribute) SetAttribute(exec boil.Executor, insert bool, related *Attribute) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"transaction_attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"attribute_id"}),
		strmangle.WhereClause("\"", "\"", 2, transactionAttributePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.AttributeID = related.ID
	if o.R == nil {
		o.R = &transactionAttributeR{
			Attribute: related,
		}
	} else {
		o.R.Attribute = related
	}

	if related.R == nil {
		related.R = &attributeR{
			TransactionAttributes: TransactionAttributeSlice{o},
		}
	} else {
		related.R.TransactionAttributes = append(related.R.TransactionAttributes, o)
	}

	return nil
}

// TransactionAttributes retrieves all the records using an executor.
func TransactionAttributes(mods ...qm.QueryMod) transactionAttributeQuery {
	mods = append(mods, qm.From("\"transaction_attributes\""))
	return transactionAttributeQuery{NewQuery(mods...)}
}

// FindTransactionAttribute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindTransactionAttribute(exec boil.Executor, iD int, selectCols ...string) (*TransactionAttribute, error) {
	transactionAttributeObj := &TransactionAttribute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"transaction_attributes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, transactionAttributeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from transaction_attributes")
	}

	return transactionAttributeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *TransactionAttribute) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no transaction_attributes provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionAttributeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	transactionAttributeInsertCacheMut.RLock()
	cache, cached := transactionAttributeInsertCache[key]
	transactionAttributeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			transactionAttributeColumns,
			transactionAttributeColumnsWithDefault,
			transactionAttributeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(transactionAttributeType, transactionAttributeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(transactionAttributeType, transactionAttributeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"transaction_attributes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"transaction_attributes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into transaction_attributes")
	}

	if !cached {
		transactionAttributeInsertCacheMut.Lock()
		transactionAttributeInsertCache[key] = cache
		transactionAttributeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the TransactionAttribute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *TransactionAttribute) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	transactionAttributeUpdateCacheMut.RLock()
	cache, cached := transactionAttributeUpdateCache[key]
	transactionAttributeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			transactionAttributeColumns,
			transactionAttributePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update transaction_attributes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"transaction_attributes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, transactionAttributePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(transactionAttributeType, transactionAttributeMapping, append(wl, transactionAttributePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update transaction_attributes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for transaction_attributes")
	}

	if !cached {
		transactionAttributeUpdateCacheMut.Lock()
		transactionAttributeUpdateCache[key] = cache
		transactionAttributeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q transactionAttributeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for transaction_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for transaction_attributes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o TransactionAttributeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"transaction_attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, transactionAttributePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in transactionAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all transactionAttribute")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *TransactionAttribute) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no transaction_attributes provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(transactionAttributeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	transactionAttributeUpsertCacheMut.RLock()
	cache, cached := transactionAttributeUpsertCache[key]
	transactionAttributeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			transactionAttributeColumns,
			transactionAttributeColumnsWithDefault,
			transactionAttributeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			transactionAttributeColumns,
			transactionAttributePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert transaction_attributes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(transactionAttributePrimaryKeyColumns))
			copy(conflict, transactionAttributePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"transaction_attributes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(transactionAttributeType, transactionAttributeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(transactionAttributeType, transactionAttributeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert transaction_attributes")
	}

	if !cached {
		transactionAttributeUpsertCacheMut.Lock()
		transactionAttributeUpsertCache[key] = cache
		transactionAttributeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single TransactionAttribute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *TransactionAttribute) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TransactionAttribute provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), transactionAttributePrimaryKeyMapping)
	sql := "DELETE FROM \"transaction_attributes\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from transaction_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for transaction_attributes")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q transactionAttributeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no transactionAttributeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from transaction_attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for transaction_attributes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o TransactionAttributeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no TransactionAttribute slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(transactionAttributeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"transaction_attributes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionAttributePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from transactionAttribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for transaction_attributes")
	}

	if len(transactionAttributeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *TransactionAttribute) Reload(exec boil.Executor) error {
	ret, err := FindTransactionAttribute(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *TransactionAttributeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := TransactionAttributeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), transactionAttributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"transaction_attributes\".* FROM \"transaction_attributes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, transactionAttributePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in TransactionAttributeSlice")
	}

	*o = slice

	return nil
}

// TransactionAttributeExists checks if the TransactionAttribute row exists.
func TransactionAttributeExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"transaction_attributes\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if transaction_attributes exists")
	}

	return exists, nil
}
