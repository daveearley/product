// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTicketAttributes(t *testing.T) {
	t.Parallel()

	query := TicketAttributes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTicketAttributesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAttribute{}
	if err = randomize.Struct(seed, o, ticketAttributeDBTypes, true, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketAttributesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAttribute{}
	if err = randomize.Struct(seed, o, ticketAttributeDBTypes, true, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TicketAttributes().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketAttributesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAttribute{}
	if err = randomize.Struct(seed, o, ticketAttributeDBTypes, true, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TicketAttributeSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketAttributesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAttribute{}
	if err = randomize.Struct(seed, o, ticketAttributeDBTypes, true, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TicketAttributeExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TicketAttribute exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TicketAttributeExists to return true, but got false.")
	}
}

func testTicketAttributesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAttribute{}
	if err = randomize.Struct(seed, o, ticketAttributeDBTypes, true, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ticketAttributeFound, err := FindTicketAttribute(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ticketAttributeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTicketAttributesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAttribute{}
	if err = randomize.Struct(seed, o, ticketAttributeDBTypes, true, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TicketAttributes().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testTicketAttributesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAttribute{}
	if err = randomize.Struct(seed, o, ticketAttributeDBTypes, true, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TicketAttributes().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTicketAttributesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ticketAttributeOne := &TicketAttribute{}
	ticketAttributeTwo := &TicketAttribute{}
	if err = randomize.Struct(seed, ticketAttributeOne, ticketAttributeDBTypes, false, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}
	if err = randomize.Struct(seed, ticketAttributeTwo, ticketAttributeDBTypes, false, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = ticketAttributeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ticketAttributeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TicketAttributes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTicketAttributesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ticketAttributeOne := &TicketAttribute{}
	ticketAttributeTwo := &TicketAttribute{}
	if err = randomize.Struct(seed, ticketAttributeOne, ticketAttributeDBTypes, false, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}
	if err = randomize.Struct(seed, ticketAttributeTwo, ticketAttributeDBTypes, false, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = ticketAttributeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ticketAttributeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ticketAttributeBeforeInsertHook(e boil.Executor, o *TicketAttribute) error {
	*o = TicketAttribute{}
	return nil
}

func ticketAttributeAfterInsertHook(e boil.Executor, o *TicketAttribute) error {
	*o = TicketAttribute{}
	return nil
}

func ticketAttributeAfterSelectHook(e boil.Executor, o *TicketAttribute) error {
	*o = TicketAttribute{}
	return nil
}

func ticketAttributeBeforeUpdateHook(e boil.Executor, o *TicketAttribute) error {
	*o = TicketAttribute{}
	return nil
}

func ticketAttributeAfterUpdateHook(e boil.Executor, o *TicketAttribute) error {
	*o = TicketAttribute{}
	return nil
}

func ticketAttributeBeforeDeleteHook(e boil.Executor, o *TicketAttribute) error {
	*o = TicketAttribute{}
	return nil
}

func ticketAttributeAfterDeleteHook(e boil.Executor, o *TicketAttribute) error {
	*o = TicketAttribute{}
	return nil
}

func ticketAttributeBeforeUpsertHook(e boil.Executor, o *TicketAttribute) error {
	*o = TicketAttribute{}
	return nil
}

func ticketAttributeAfterUpsertHook(e boil.Executor, o *TicketAttribute) error {
	*o = TicketAttribute{}
	return nil
}

func testTicketAttributesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &TicketAttribute{}
	o := &TicketAttribute{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ticketAttributeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TicketAttribute object: %s", err)
	}

	AddTicketAttributeHook(boil.BeforeInsertHook, ticketAttributeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ticketAttributeBeforeInsertHooks = []TicketAttributeHook{}

	AddTicketAttributeHook(boil.AfterInsertHook, ticketAttributeAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ticketAttributeAfterInsertHooks = []TicketAttributeHook{}

	AddTicketAttributeHook(boil.AfterSelectHook, ticketAttributeAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ticketAttributeAfterSelectHooks = []TicketAttributeHook{}

	AddTicketAttributeHook(boil.BeforeUpdateHook, ticketAttributeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ticketAttributeBeforeUpdateHooks = []TicketAttributeHook{}

	AddTicketAttributeHook(boil.AfterUpdateHook, ticketAttributeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ticketAttributeAfterUpdateHooks = []TicketAttributeHook{}

	AddTicketAttributeHook(boil.BeforeDeleteHook, ticketAttributeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ticketAttributeBeforeDeleteHooks = []TicketAttributeHook{}

	AddTicketAttributeHook(boil.AfterDeleteHook, ticketAttributeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ticketAttributeAfterDeleteHooks = []TicketAttributeHook{}

	AddTicketAttributeHook(boil.BeforeUpsertHook, ticketAttributeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ticketAttributeBeforeUpsertHooks = []TicketAttributeHook{}

	AddTicketAttributeHook(boil.AfterUpsertHook, ticketAttributeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ticketAttributeAfterUpsertHooks = []TicketAttributeHook{}
}

func testTicketAttributesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAttribute{}
	if err = randomize.Struct(seed, o, ticketAttributeDBTypes, true, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTicketAttributesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAttribute{}
	if err = randomize.Struct(seed, o, ticketAttributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(ticketAttributeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TicketAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTicketAttributeToOneTicketUsingTicket(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TicketAttribute
	var foreign Ticket

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ticketAttributeDBTypes, false, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TicketID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Ticket().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TicketAttributeSlice{&local}
	if err = local.L.LoadTicket(tx, false, (*[]*TicketAttribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ticket == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Ticket = nil
	if err = local.L.LoadTicket(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ticket == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTicketAttributeToOneAttributeUsingAttribute(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TicketAttribute
	var foreign Attribute

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ticketAttributeDBTypes, false, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AttributeID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Attribute().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TicketAttributeSlice{&local}
	if err = local.L.LoadAttribute(tx, false, (*[]*TicketAttribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Attribute == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Attribute = nil
	if err = local.L.LoadAttribute(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Attribute == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTicketAttributeToOneSetOpTicketUsingTicket(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TicketAttribute
	var b, c Ticket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketAttributeDBTypes, false, strmangle.SetComplement(ticketAttributePrimaryKeyColumns, ticketAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Ticket{&b, &c} {
		err = a.SetTicket(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Ticket != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TicketAttributes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TicketID != x.ID {
			t.Error("foreign key was wrong value", a.TicketID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TicketID))
		reflect.Indirect(reflect.ValueOf(&a.TicketID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TicketID != x.ID {
			t.Error("foreign key was wrong value", a.TicketID, x.ID)
		}
	}
}
func testTicketAttributeToOneSetOpAttributeUsingAttribute(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TicketAttribute
	var b, c Attribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketAttributeDBTypes, false, strmangle.SetComplement(ticketAttributePrimaryKeyColumns, ticketAttributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Attribute{&b, &c} {
		err = a.SetAttribute(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Attribute != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TicketAttributes[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AttributeID != x.ID {
			t.Error("foreign key was wrong value", a.AttributeID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AttributeID))
		reflect.Indirect(reflect.ValueOf(&a.AttributeID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AttributeID != x.ID {
			t.Error("foreign key was wrong value", a.AttributeID, x.ID)
		}
	}
}

func testTicketAttributesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAttribute{}
	if err = randomize.Struct(seed, o, ticketAttributeDBTypes, true, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTicketAttributesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAttribute{}
	if err = randomize.Struct(seed, o, ticketAttributeDBTypes, true, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TicketAttributeSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testTicketAttributesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketAttribute{}
	if err = randomize.Struct(seed, o, ticketAttributeDBTypes, true, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TicketAttributes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ticketAttributeDBTypes = map[string]string{`AttributeID`: `integer`, `ID`: `integer`, `TicketID`: `integer`}
	_                      = bytes.MinRead
)

func testTicketAttributesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ticketAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ticketAttributeColumns) == len(ticketAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TicketAttribute{}
	if err = randomize.Struct(seed, o, ticketAttributeDBTypes, true, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ticketAttributeDBTypes, true, ticketAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTicketAttributesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ticketAttributeColumns) == len(ticketAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TicketAttribute{}
	if err = randomize.Struct(seed, o, ticketAttributeDBTypes, true, ticketAttributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ticketAttributeDBTypes, true, ticketAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ticketAttributeColumns, ticketAttributePrimaryKeyColumns) {
		fields = ticketAttributeColumns
	} else {
		fields = strmangle.SetComplement(
			ticketAttributeColumns,
			ticketAttributePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TicketAttributeSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTicketAttributesUpsert(t *testing.T) {
	t.Parallel()

	if len(ticketAttributeColumns) == len(ticketAttributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TicketAttribute{}
	if err = randomize.Struct(seed, &o, ticketAttributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TicketAttribute: %s", err)
	}

	count, err := TicketAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ticketAttributeDBTypes, false, ticketAttributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketAttribute struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TicketAttribute: %s", err)
	}

	count, err = TicketAttributes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
