// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testEvents(t *testing.T) {
	t.Parallel()

	query := Events()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testEventsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Event{}
	if err = randomize.Struct(seed, o, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Events().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEventsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Event{}
	if err = randomize.Struct(seed, o, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Events().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Events().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEventsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Event{}
	if err = randomize.Struct(seed, o, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EventSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Events().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testEventsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Event{}
	if err = randomize.Struct(seed, o, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := EventExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Event exists: %s", err)
	}
	if !e {
		t.Errorf("Expected EventExists to return true, but got false.")
	}
}

func testEventsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Event{}
	if err = randomize.Struct(seed, o, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	eventFound, err := FindEvent(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if eventFound == nil {
		t.Error("want a record, got nil")
	}
}

func testEventsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Event{}
	if err = randomize.Struct(seed, o, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Events().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testEventsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Event{}
	if err = randomize.Struct(seed, o, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Events().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testEventsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	eventOne := &Event{}
	eventTwo := &Event{}
	if err = randomize.Struct(seed, eventOne, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}
	if err = randomize.Struct(seed, eventTwo, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = eventOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = eventTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Events().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testEventsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	eventOne := &Event{}
	eventTwo := &Event{}
	if err = randomize.Struct(seed, eventOne, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}
	if err = randomize.Struct(seed, eventTwo, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = eventOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = eventTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Events().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func eventBeforeInsertHook(e boil.Executor, o *Event) error {
	*o = Event{}
	return nil
}

func eventAfterInsertHook(e boil.Executor, o *Event) error {
	*o = Event{}
	return nil
}

func eventAfterSelectHook(e boil.Executor, o *Event) error {
	*o = Event{}
	return nil
}

func eventBeforeUpdateHook(e boil.Executor, o *Event) error {
	*o = Event{}
	return nil
}

func eventAfterUpdateHook(e boil.Executor, o *Event) error {
	*o = Event{}
	return nil
}

func eventBeforeDeleteHook(e boil.Executor, o *Event) error {
	*o = Event{}
	return nil
}

func eventAfterDeleteHook(e boil.Executor, o *Event) error {
	*o = Event{}
	return nil
}

func eventBeforeUpsertHook(e boil.Executor, o *Event) error {
	*o = Event{}
	return nil
}

func eventAfterUpsertHook(e boil.Executor, o *Event) error {
	*o = Event{}
	return nil
}

func testEventsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Event{}
	o := &Event{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, eventDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Event object: %s", err)
	}

	AddEventHook(boil.BeforeInsertHook, eventBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	eventBeforeInsertHooks = []EventHook{}

	AddEventHook(boil.AfterInsertHook, eventAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	eventAfterInsertHooks = []EventHook{}

	AddEventHook(boil.AfterSelectHook, eventAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	eventAfterSelectHooks = []EventHook{}

	AddEventHook(boil.BeforeUpdateHook, eventBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	eventBeforeUpdateHooks = []EventHook{}

	AddEventHook(boil.AfterUpdateHook, eventAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	eventAfterUpdateHooks = []EventHook{}

	AddEventHook(boil.BeforeDeleteHook, eventBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	eventBeforeDeleteHooks = []EventHook{}

	AddEventHook(boil.AfterDeleteHook, eventAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	eventAfterDeleteHooks = []EventHook{}

	AddEventHook(boil.BeforeUpsertHook, eventBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	eventBeforeUpsertHooks = []EventHook{}

	AddEventHook(boil.AfterUpsertHook, eventAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	eventAfterUpsertHooks = []EventHook{}
}

func testEventsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Event{}
	if err = randomize.Struct(seed, o, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Events().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEventsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Event{}
	if err = randomize.Struct(seed, o, eventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(eventColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Events().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testEventToManyAttendees(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Event
	var b, c Attendee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, attendeeDBTypes, false, attendeeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attendeeDBTypes, false, attendeeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.EventID = a.ID
	c.EventID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	attendee, err := a.Attendees().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range attendee {
		if v.EventID == b.EventID {
			bFound = true
		}
		if v.EventID == c.EventID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EventSlice{&a}
	if err = a.L.LoadAttendees(tx, false, (*[]*Event)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Attendees); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Attendees = nil
	if err = a.L.LoadAttendees(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Attendees); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", attendee)
	}
}

func testEventToManyCustomers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Event
	var b, c Customer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, customerDBTypes, false, customerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, customerDBTypes, false, customerColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.EventID = a.ID
	c.EventID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	customer, err := a.Customers().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range customer {
		if v.EventID == b.EventID {
			bFound = true
		}
		if v.EventID == c.EventID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EventSlice{&a}
	if err = a.L.LoadCustomers(tx, false, (*[]*Event)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Customers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Customers = nil
	if err = a.L.LoadCustomers(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Customers); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", customer)
	}
}

func testEventToManyEventAttributes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Event
	var b, c EventAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, eventAttributeDBTypes, false, eventAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, eventAttributeDBTypes, false, eventAttributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.EventID = a.ID
	c.EventID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	eventAttribute, err := a.EventAttributes().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range eventAttribute {
		if v.EventID == b.EventID {
			bFound = true
		}
		if v.EventID == c.EventID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EventSlice{&a}
	if err = a.L.LoadEventAttributes(tx, false, (*[]*Event)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EventAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.EventAttributes = nil
	if err = a.L.LoadEventAttributes(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EventAttributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", eventAttribute)
	}
}

func testEventToManyEventQuestions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Event
	var b, c EventQuestion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, eventQuestionDBTypes, false, eventQuestionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, eventQuestionDBTypes, false, eventQuestionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.EventID = a.ID
	c.EventID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	eventQuestion, err := a.EventQuestions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range eventQuestion {
		if v.EventID == b.EventID {
			bFound = true
		}
		if v.EventID == c.EventID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EventSlice{&a}
	if err = a.L.LoadEventQuestions(tx, false, (*[]*Event)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EventQuestions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.EventQuestions = nil
	if err = a.L.LoadEventQuestions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.EventQuestions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", eventQuestion)
	}
}

func testEventToManyTickets(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Event
	var b, c Ticket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.EventID = a.ID
	c.EventID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	ticket, err := a.Tickets().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range ticket {
		if v.EventID == b.EventID {
			bFound = true
		}
		if v.EventID == c.EventID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EventSlice{&a}
	if err = a.L.LoadTickets(tx, false, (*[]*Event)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tickets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Tickets = nil
	if err = a.L.LoadTickets(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tickets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", ticket)
	}
}

func testEventToManyTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Event
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.EventID = a.ID
	c.EventID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	transaction, err := a.Transactions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range transaction {
		if v.EventID == b.EventID {
			bFound = true
		}
		if v.EventID == c.EventID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := EventSlice{&a}
	if err = a.L.LoadTransactions(tx, false, (*[]*Event)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Transactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Transactions = nil
	if err = a.L.LoadTransactions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Transactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", transaction)
	}
}

func testEventToManyAddOpAttendees(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Event
	var b, c, d, e Attendee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Attendee{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, attendeeDBTypes, false, strmangle.SetComplement(attendeePrimaryKeyColumns, attendeeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Attendee{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAttendees(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EventID {
			t.Error("foreign key was wrong value", a.ID, first.EventID)
		}
		if a.ID != second.EventID {
			t.Error("foreign key was wrong value", a.ID, second.EventID)
		}

		if first.R.Event != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Event != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Attendees[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Attendees[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Attendees().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testEventToManyAddOpCustomers(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Event
	var b, c, d, e Customer

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Customer{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, customerDBTypes, false, strmangle.SetComplement(customerPrimaryKeyColumns, customerColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Customer{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddCustomers(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EventID {
			t.Error("foreign key was wrong value", a.ID, first.EventID)
		}
		if a.ID != second.EventID {
			t.Error("foreign key was wrong value", a.ID, second.EventID)
		}

		if first.R.Event != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Event != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Customers[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Customers[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Customers().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testEventToManyAddOpEventAttributes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Event
	var b, c, d, e EventAttribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*EventAttribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, eventAttributeDBTypes, false, strmangle.SetComplement(eventAttributePrimaryKeyColumns, eventAttributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*EventAttribute{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEventAttributes(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EventID {
			t.Error("foreign key was wrong value", a.ID, first.EventID)
		}
		if a.ID != second.EventID {
			t.Error("foreign key was wrong value", a.ID, second.EventID)
		}

		if first.R.Event != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Event != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.EventAttributes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.EventAttributes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.EventAttributes().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testEventToManyAddOpEventQuestions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Event
	var b, c, d, e EventQuestion

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*EventQuestion{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, eventQuestionDBTypes, false, strmangle.SetComplement(eventQuestionPrimaryKeyColumns, eventQuestionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*EventQuestion{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEventQuestions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EventID {
			t.Error("foreign key was wrong value", a.ID, first.EventID)
		}
		if a.ID != second.EventID {
			t.Error("foreign key was wrong value", a.ID, second.EventID)
		}

		if first.R.Event != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Event != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.EventQuestions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.EventQuestions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.EventQuestions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testEventToManyAddOpTickets(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Event
	var b, c, d, e Ticket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Ticket{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Ticket{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTickets(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EventID {
			t.Error("foreign key was wrong value", a.ID, first.EventID)
		}
		if a.ID != second.EventID {
			t.Error("foreign key was wrong value", a.ID, second.EventID)
		}

		if first.R.Event != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Event != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Tickets[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Tickets[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Tickets().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testEventToManyAddOpTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Event
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Transaction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTransactions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.EventID {
			t.Error("foreign key was wrong value", a.ID, first.EventID)
		}
		if a.ID != second.EventID {
			t.Error("foreign key was wrong value", a.ID, second.EventID)
		}

		if first.R.Event != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Event != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Transactions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Transactions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Transactions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testEventToOneAccountUsingAccount(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Event
	var foreign Account

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, accountDBTypes, false, accountColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Account struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.AccountID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Account().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EventSlice{&local}
	if err = local.L.LoadAccount(tx, false, (*[]*Event)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Account = nil
	if err = local.L.LoadAccount(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Account == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEventToOneAccountUserUsingUser(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Event
	var foreign AccountUser

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, accountUserDBTypes, false, accountUserColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize AccountUser struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.UserID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.User().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := EventSlice{&local}
	if err = local.L.LoadUser(tx, false, (*[]*Event)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.User = nil
	if err = local.L.LoadUser(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.User == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testEventToOneSetOpAccountUsingAccount(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Event
	var b, c Account

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountDBTypes, false, strmangle.SetComplement(accountPrimaryKeyColumns, accountColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Account{&b, &c} {
		err = a.SetAccount(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Account != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Events[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.AccountID != x.ID {
			t.Error("foreign key was wrong value", a.AccountID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.AccountID))
		reflect.Indirect(reflect.ValueOf(&a.AccountID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.AccountID != x.ID {
			t.Error("foreign key was wrong value", a.AccountID, x.ID)
		}
	}
}
func testEventToOneSetOpAccountUserUsingUser(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Event
	var b, c AccountUser

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, accountUserDBTypes, false, strmangle.SetComplement(accountUserPrimaryKeyColumns, accountUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, accountUserDBTypes, false, strmangle.SetComplement(accountUserPrimaryKeyColumns, accountUserColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*AccountUser{&b, &c} {
		err = a.SetUser(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.User != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.UserEvents[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.UserID))
		reflect.Indirect(reflect.ValueOf(&a.UserID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.UserID != x.ID {
			t.Error("foreign key was wrong value", a.UserID, x.ID)
		}
	}
}

func testEventsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Event{}
	if err = randomize.Struct(seed, o, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testEventsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Event{}
	if err = randomize.Struct(seed, o, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := EventSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testEventsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Event{}
	if err = randomize.Struct(seed, o, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Events().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	eventDBTypes = map[string]string{`AccountID`: `integer`, `CreatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`, `EndDate`: `timestamp without time zone`, `ID`: `integer`, `StartDate`: `timestamp without time zone`, `Status`: `enum.event_status('ACTIVE')`, `Title`: `character varying`, `UpdatedAt`: `timestamp without time zone`, `UserID`: `integer`}
	_            = bytes.MinRead
)

func testEventsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(eventPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(eventColumns) == len(eventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Event{}
	if err = randomize.Struct(seed, o, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Events().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, eventDBTypes, true, eventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testEventsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(eventColumns) == len(eventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Event{}
	if err = randomize.Struct(seed, o, eventDBTypes, true, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Events().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, eventDBTypes, true, eventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(eventColumns, eventPrimaryKeyColumns) {
		fields = eventColumns
	} else {
		fields = strmangle.SetComplement(
			eventColumns,
			eventPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := EventSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testEventsUpsert(t *testing.T) {
	t.Parallel()

	if len(eventColumns) == len(eventPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Event{}
	if err = randomize.Struct(seed, &o, eventDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Event: %s", err)
	}

	count, err := Events().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, eventDBTypes, false, eventPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Event: %s", err)
	}

	count, err = Events().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
