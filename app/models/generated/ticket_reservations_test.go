// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTicketReservations(t *testing.T) {
	t.Parallel()

	query := TicketReservations()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTicketReservationsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketReservation{}
	if err = randomize.Struct(seed, o, ticketReservationDBTypes, true, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketReservations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketReservationsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketReservation{}
	if err = randomize.Struct(seed, o, ticketReservationDBTypes, true, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TicketReservations().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketReservations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketReservationsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketReservation{}
	if err = randomize.Struct(seed, o, ticketReservationDBTypes, true, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TicketReservationSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TicketReservations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketReservationsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketReservation{}
	if err = randomize.Struct(seed, o, ticketReservationDBTypes, true, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TicketReservationExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TicketReservation exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TicketReservationExists to return true, but got false.")
	}
}

func testTicketReservationsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketReservation{}
	if err = randomize.Struct(seed, o, ticketReservationDBTypes, true, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ticketReservationFound, err := FindTicketReservation(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ticketReservationFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTicketReservationsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketReservation{}
	if err = randomize.Struct(seed, o, ticketReservationDBTypes, true, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TicketReservations().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testTicketReservationsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketReservation{}
	if err = randomize.Struct(seed, o, ticketReservationDBTypes, true, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TicketReservations().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTicketReservationsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ticketReservationOne := &TicketReservation{}
	ticketReservationTwo := &TicketReservation{}
	if err = randomize.Struct(seed, ticketReservationOne, ticketReservationDBTypes, false, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}
	if err = randomize.Struct(seed, ticketReservationTwo, ticketReservationDBTypes, false, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = ticketReservationOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ticketReservationTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TicketReservations().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTicketReservationsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ticketReservationOne := &TicketReservation{}
	ticketReservationTwo := &TicketReservation{}
	if err = randomize.Struct(seed, ticketReservationOne, ticketReservationDBTypes, false, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}
	if err = randomize.Struct(seed, ticketReservationTwo, ticketReservationDBTypes, false, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = ticketReservationOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ticketReservationTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketReservations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ticketReservationBeforeInsertHook(e boil.Executor, o *TicketReservation) error {
	*o = TicketReservation{}
	return nil
}

func ticketReservationAfterInsertHook(e boil.Executor, o *TicketReservation) error {
	*o = TicketReservation{}
	return nil
}

func ticketReservationAfterSelectHook(e boil.Executor, o *TicketReservation) error {
	*o = TicketReservation{}
	return nil
}

func ticketReservationBeforeUpdateHook(e boil.Executor, o *TicketReservation) error {
	*o = TicketReservation{}
	return nil
}

func ticketReservationAfterUpdateHook(e boil.Executor, o *TicketReservation) error {
	*o = TicketReservation{}
	return nil
}

func ticketReservationBeforeDeleteHook(e boil.Executor, o *TicketReservation) error {
	*o = TicketReservation{}
	return nil
}

func ticketReservationAfterDeleteHook(e boil.Executor, o *TicketReservation) error {
	*o = TicketReservation{}
	return nil
}

func ticketReservationBeforeUpsertHook(e boil.Executor, o *TicketReservation) error {
	*o = TicketReservation{}
	return nil
}

func ticketReservationAfterUpsertHook(e boil.Executor, o *TicketReservation) error {
	*o = TicketReservation{}
	return nil
}

func testTicketReservationsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &TicketReservation{}
	o := &TicketReservation{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ticketReservationDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TicketReservation object: %s", err)
	}

	AddTicketReservationHook(boil.BeforeInsertHook, ticketReservationBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ticketReservationBeforeInsertHooks = []TicketReservationHook{}

	AddTicketReservationHook(boil.AfterInsertHook, ticketReservationAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ticketReservationAfterInsertHooks = []TicketReservationHook{}

	AddTicketReservationHook(boil.AfterSelectHook, ticketReservationAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ticketReservationAfterSelectHooks = []TicketReservationHook{}

	AddTicketReservationHook(boil.BeforeUpdateHook, ticketReservationBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ticketReservationBeforeUpdateHooks = []TicketReservationHook{}

	AddTicketReservationHook(boil.AfterUpdateHook, ticketReservationAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ticketReservationAfterUpdateHooks = []TicketReservationHook{}

	AddTicketReservationHook(boil.BeforeDeleteHook, ticketReservationBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ticketReservationBeforeDeleteHooks = []TicketReservationHook{}

	AddTicketReservationHook(boil.AfterDeleteHook, ticketReservationAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ticketReservationAfterDeleteHooks = []TicketReservationHook{}

	AddTicketReservationHook(boil.BeforeUpsertHook, ticketReservationBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ticketReservationBeforeUpsertHooks = []TicketReservationHook{}

	AddTicketReservationHook(boil.AfterUpsertHook, ticketReservationAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ticketReservationAfterUpsertHooks = []TicketReservationHook{}
}

func testTicketReservationsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketReservation{}
	if err = randomize.Struct(seed, o, ticketReservationDBTypes, true, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketReservations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTicketReservationsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketReservation{}
	if err = randomize.Struct(seed, o, ticketReservationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(ticketReservationColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TicketReservations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTicketReservationToOneTicketUsingTicket(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TicketReservation
	var foreign Ticket

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ticketReservationDBTypes, true, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TicketID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Ticket().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TicketReservationSlice{&local}
	if err = local.L.LoadTicket(tx, false, (*[]*TicketReservation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ticket == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Ticket = nil
	if err = local.L.LoadTicket(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ticket == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTicketReservationToOneTransactionUsingTransaction(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TicketReservation
	var foreign Transaction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ticketReservationDBTypes, true, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Transaction struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&local.TransactionID, foreign.ID)
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Transaction().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if !queries.Equal(check.ID, foreign.ID) {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TicketReservationSlice{&local}
	if err = local.L.LoadTransaction(tx, false, (*[]*TicketReservation)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Transaction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Transaction = nil
	if err = local.L.LoadTransaction(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Transaction == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTicketReservationToOneSetOpTicketUsingTicket(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TicketReservation
	var b, c Ticket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketReservationDBTypes, false, strmangle.SetComplement(ticketReservationPrimaryKeyColumns, ticketReservationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Ticket{&b, &c} {
		err = a.SetTicket(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Ticket != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TicketReservations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TicketID, x.ID) {
			t.Error("foreign key was wrong value", a.TicketID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TicketID))
		reflect.Indirect(reflect.ValueOf(&a.TicketID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TicketID, x.ID) {
			t.Error("foreign key was wrong value", a.TicketID, x.ID)
		}
	}
}

func testTicketReservationToOneRemoveOpTicketUsingTicket(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TicketReservation
	var b Ticket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketReservationDBTypes, false, strmangle.SetComplement(ticketReservationPrimaryKeyColumns, ticketReservationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTicket(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTicket(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Ticket().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Ticket != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TicketID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.TicketReservations) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTicketReservationToOneSetOpTransactionUsingTransaction(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TicketReservation
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketReservationDBTypes, false, strmangle.SetComplement(ticketReservationPrimaryKeyColumns, ticketReservationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Transaction{&b, &c} {
		err = a.SetTransaction(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Transaction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TicketReservations[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if !queries.Equal(a.TransactionID, x.ID) {
			t.Error("foreign key was wrong value", a.TransactionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TransactionID))
		reflect.Indirect(reflect.ValueOf(&a.TransactionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if !queries.Equal(a.TransactionID, x.ID) {
			t.Error("foreign key was wrong value", a.TransactionID, x.ID)
		}
	}
}

func testTicketReservationToOneRemoveOpTransactionUsingTransaction(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TicketReservation
	var b Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketReservationDBTypes, false, strmangle.SetComplement(ticketReservationPrimaryKeyColumns, ticketReservationColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = a.SetTransaction(tx, true, &b); err != nil {
		t.Fatal(err)
	}

	if err = a.RemoveTransaction(tx, &b); err != nil {
		t.Error("failed to remove relationship")
	}

	count, err := a.Transaction().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 0 {
		t.Error("want no relationships remaining")
	}

	if a.R.Transaction != nil {
		t.Error("R struct entry should be nil")
	}

	if !queries.IsValuerNil(a.TransactionID) {
		t.Error("foreign key value should be nil")
	}

	if len(b.R.TicketReservations) != 0 {
		t.Error("failed to remove a from b's relationships")
	}
}

func testTicketReservationsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketReservation{}
	if err = randomize.Struct(seed, o, ticketReservationDBTypes, true, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTicketReservationsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketReservation{}
	if err = randomize.Struct(seed, o, ticketReservationDBTypes, true, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TicketReservationSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testTicketReservationsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TicketReservation{}
	if err = randomize.Struct(seed, o, ticketReservationDBTypes, true, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TicketReservations().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ticketReservationDBTypes = map[string]string{`ID`: `integer`, `ReservedUntil`: `timestamp without time zone`, `TicketID`: `integer`, `TicketQuantity`: `integer`, `TransactionID`: `integer`}
	_                        = bytes.MinRead
)

func testTicketReservationsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ticketReservationPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ticketReservationColumns) == len(ticketReservationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TicketReservation{}
	if err = randomize.Struct(seed, o, ticketReservationDBTypes, true, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketReservations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ticketReservationDBTypes, true, ticketReservationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTicketReservationsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ticketReservationColumns) == len(ticketReservationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TicketReservation{}
	if err = randomize.Struct(seed, o, ticketReservationDBTypes, true, ticketReservationColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TicketReservations().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ticketReservationDBTypes, true, ticketReservationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ticketReservationColumns, ticketReservationPrimaryKeyColumns) {
		fields = ticketReservationColumns
	} else {
		fields = strmangle.SetComplement(
			ticketReservationColumns,
			ticketReservationPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TicketReservationSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTicketReservationsUpsert(t *testing.T) {
	t.Parallel()

	if len(ticketReservationColumns) == len(ticketReservationPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TicketReservation{}
	if err = randomize.Struct(seed, &o, ticketReservationDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TicketReservation: %s", err)
	}

	count, err := TicketReservations().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ticketReservationDBTypes, false, ticketReservationPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TicketReservation struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TicketReservation: %s", err)
	}

	count, err = TicketReservations().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
