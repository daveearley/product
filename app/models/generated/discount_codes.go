// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
	"github.com/volatiletech/sqlboiler/types"
)

// DiscountCode is an object representing the database table.
type DiscountCode struct {
	ID        int           `boil:"id" json:"id" toml:"id" yaml:"id"`
	Code      string        `boil:"code" json:"code" toml:"code" yaml:"code"`
	Discount  types.Decimal `boil:"discount" json:"discount" toml:"discount" yaml:"discount"`
	Type      string        `boil:"type" json:"type" toml:"type" yaml:"type"`
	CreatedAt time.Time     `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time     `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt time.Time     `boil:"deleted_at" json:"deleted_at" toml:"deleted_at" yaml:"deleted_at"`

	R *discountCodeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L discountCodeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var DiscountCodeColumns = struct {
	ID        string
	Code      string
	Discount  string
	Type      string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	Code:      "code",
	Discount:  "discount",
	Type:      "type",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

// DiscountCodeRels is where relationship names are stored.
var DiscountCodeRels = struct {
	TransactionDiscountCodes string
}{
	TransactionDiscountCodes: "TransactionDiscountCodes",
}

// discountCodeR is where relationships are stored.
type discountCodeR struct {
	TransactionDiscountCodes TransactionDiscountCodeSlice
}

// NewStruct creates a new relationship struct
func (*discountCodeR) NewStruct() *discountCodeR {
	return &discountCodeR{}
}

// discountCodeL is where Load methods for each relationship are stored.
type discountCodeL struct{}

var (
	discountCodeColumns               = []string{"id", "code", "discount", "type", "created_at", "updated_at", "deleted_at"}
	discountCodeColumnsWithoutDefault = []string{"code", "discount", "type", "created_at", "updated_at", "deleted_at"}
	discountCodeColumnsWithDefault    = []string{"id"}
	discountCodePrimaryKeyColumns     = []string{"id"}
)

type (
	// DiscountCodeSlice is an alias for a slice of pointers to DiscountCode.
	// This should generally be used opposed to []DiscountCode.
	DiscountCodeSlice []*DiscountCode
	// DiscountCodeHook is the signature for custom DiscountCode hook methods
	DiscountCodeHook func(boil.Executor, *DiscountCode) error

	discountCodeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	discountCodeType                 = reflect.TypeOf(&DiscountCode{})
	discountCodeMapping              = queries.MakeStructMapping(discountCodeType)
	discountCodePrimaryKeyMapping, _ = queries.BindMapping(discountCodeType, discountCodeMapping, discountCodePrimaryKeyColumns)
	discountCodeInsertCacheMut       sync.RWMutex
	discountCodeInsertCache          = make(map[string]insertCache)
	discountCodeUpdateCacheMut       sync.RWMutex
	discountCodeUpdateCache          = make(map[string]updateCache)
	discountCodeUpsertCacheMut       sync.RWMutex
	discountCodeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var discountCodeBeforeInsertHooks []DiscountCodeHook
var discountCodeBeforeUpdateHooks []DiscountCodeHook
var discountCodeBeforeDeleteHooks []DiscountCodeHook
var discountCodeBeforeUpsertHooks []DiscountCodeHook

var discountCodeAfterInsertHooks []DiscountCodeHook
var discountCodeAfterSelectHooks []DiscountCodeHook
var discountCodeAfterUpdateHooks []DiscountCodeHook
var discountCodeAfterDeleteHooks []DiscountCodeHook
var discountCodeAfterUpsertHooks []DiscountCodeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *DiscountCode) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range discountCodeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *DiscountCode) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range discountCodeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *DiscountCode) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range discountCodeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *DiscountCode) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range discountCodeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *DiscountCode) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range discountCodeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *DiscountCode) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range discountCodeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *DiscountCode) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range discountCodeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *DiscountCode) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range discountCodeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *DiscountCode) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range discountCodeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddDiscountCodeHook registers your hook function for all future operations.
func AddDiscountCodeHook(hookPoint boil.HookPoint, discountCodeHook DiscountCodeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		discountCodeBeforeInsertHooks = append(discountCodeBeforeInsertHooks, discountCodeHook)
	case boil.BeforeUpdateHook:
		discountCodeBeforeUpdateHooks = append(discountCodeBeforeUpdateHooks, discountCodeHook)
	case boil.BeforeDeleteHook:
		discountCodeBeforeDeleteHooks = append(discountCodeBeforeDeleteHooks, discountCodeHook)
	case boil.BeforeUpsertHook:
		discountCodeBeforeUpsertHooks = append(discountCodeBeforeUpsertHooks, discountCodeHook)
	case boil.AfterInsertHook:
		discountCodeAfterInsertHooks = append(discountCodeAfterInsertHooks, discountCodeHook)
	case boil.AfterSelectHook:
		discountCodeAfterSelectHooks = append(discountCodeAfterSelectHooks, discountCodeHook)
	case boil.AfterUpdateHook:
		discountCodeAfterUpdateHooks = append(discountCodeAfterUpdateHooks, discountCodeHook)
	case boil.AfterDeleteHook:
		discountCodeAfterDeleteHooks = append(discountCodeAfterDeleteHooks, discountCodeHook)
	case boil.AfterUpsertHook:
		discountCodeAfterUpsertHooks = append(discountCodeAfterUpsertHooks, discountCodeHook)
	}
}

// One returns a single discountCode record from the query.
func (q discountCodeQuery) One(exec boil.Executor) (*DiscountCode, error) {
	o := &DiscountCode{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for discount_codes")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all DiscountCode records from the query.
func (q discountCodeQuery) All(exec boil.Executor) (DiscountCodeSlice, error) {
	var o []*DiscountCode

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to DiscountCode slice")
	}

	if len(discountCodeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all DiscountCode records in the query.
func (q discountCodeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count discount_codes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q discountCodeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if discount_codes exists")
	}

	return count > 0, nil
}

// TransactionDiscountCodes retrieves all the transaction_discount_code's TransactionDiscountCodes with an executor.
func (o *DiscountCode) TransactionDiscountCodes(mods ...qm.QueryMod) transactionDiscountCodeQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"transaction_discount_codes\".\"discount_code_id\"=?", o.ID),
	)

	query := TransactionDiscountCodes(queryMods...)
	queries.SetFrom(query.Query, "\"transaction_discount_codes\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"transaction_discount_codes\".*"})
	}

	return query
}

// LoadTransactionDiscountCodes allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (discountCodeL) LoadTransactionDiscountCodes(e boil.Executor, singular bool, maybeDiscountCode interface{}, mods queries.Applicator) error {
	var slice []*DiscountCode
	var object *DiscountCode

	if singular {
		object = maybeDiscountCode.(*DiscountCode)
	} else {
		slice = *maybeDiscountCode.(*[]*DiscountCode)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &discountCodeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &discountCodeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(qm.From(`transaction_discount_codes`), qm.WhereIn(`discount_code_id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transaction_discount_codes")
	}

	var resultSlice []*TransactionDiscountCode
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice transaction_discount_codes")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transaction_discount_codes")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transaction_discount_codes")
	}

	if len(transactionDiscountCodeAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.TransactionDiscountCodes = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionDiscountCodeR{}
			}
			foreign.R.DiscountCode = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.DiscountCodeID {
				local.R.TransactionDiscountCodes = append(local.R.TransactionDiscountCodes, foreign)
				if foreign.R == nil {
					foreign.R = &transactionDiscountCodeR{}
				}
				foreign.R.DiscountCode = local
				break
			}
		}
	}

	return nil
}

// AddTransactionDiscountCodes adds the given related objects to the existing relationships
// of the discount_code, optionally inserting them as new records.
// Appends related to o.R.TransactionDiscountCodes.
// Sets related.R.DiscountCode appropriately.
func (o *DiscountCode) AddTransactionDiscountCodes(exec boil.Executor, insert bool, related ...*TransactionDiscountCode) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.DiscountCodeID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"transaction_discount_codes\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"discount_code_id"}),
				strmangle.WhereClause("\"", "\"", 2, transactionDiscountCodePrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}

			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.DiscountCodeID = o.ID
		}
	}

	if o.R == nil {
		o.R = &discountCodeR{
			TransactionDiscountCodes: related,
		}
	} else {
		o.R.TransactionDiscountCodes = append(o.R.TransactionDiscountCodes, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionDiscountCodeR{
				DiscountCode: o,
			}
		} else {
			rel.R.DiscountCode = o
		}
	}
	return nil
}

// DiscountCodes retrieves all the records using an executor.
func DiscountCodes(mods ...qm.QueryMod) discountCodeQuery {
	mods = append(mods, qm.From("\"discount_codes\""))
	return discountCodeQuery{NewQuery(mods...)}
}

// FindDiscountCode retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindDiscountCode(exec boil.Executor, iD int, selectCols ...string) (*DiscountCode, error) {
	discountCodeObj := &DiscountCode{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"discount_codes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, discountCodeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from discount_codes")
	}

	return discountCodeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *DiscountCode) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no discount_codes provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(discountCodeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	discountCodeInsertCacheMut.RLock()
	cache, cached := discountCodeInsertCache[key]
	discountCodeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			discountCodeColumns,
			discountCodeColumnsWithDefault,
			discountCodeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(discountCodeType, discountCodeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(discountCodeType, discountCodeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"discount_codes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"discount_codes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into discount_codes")
	}

	if !cached {
		discountCodeInsertCacheMut.Lock()
		discountCodeInsertCache[key] = cache
		discountCodeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the DiscountCode.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *DiscountCode) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	discountCodeUpdateCacheMut.RLock()
	cache, cached := discountCodeUpdateCache[key]
	discountCodeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			discountCodeColumns,
			discountCodePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update discount_codes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"discount_codes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, discountCodePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(discountCodeType, discountCodeMapping, append(wl, discountCodePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update discount_codes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for discount_codes")
	}

	if !cached {
		discountCodeUpdateCacheMut.Lock()
		discountCodeUpdateCache[key] = cache
		discountCodeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q discountCodeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for discount_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for discount_codes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o DiscountCodeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discountCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"discount_codes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, discountCodePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in discountCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all discountCode")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *DiscountCode) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no discount_codes provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(discountCodeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	discountCodeUpsertCacheMut.RLock()
	cache, cached := discountCodeUpsertCache[key]
	discountCodeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			discountCodeColumns,
			discountCodeColumnsWithDefault,
			discountCodeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			discountCodeColumns,
			discountCodePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert discount_codes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(discountCodePrimaryKeyColumns))
			copy(conflict, discountCodePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"discount_codes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(discountCodeType, discountCodeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(discountCodeType, discountCodeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert discount_codes")
	}

	if !cached {
		discountCodeUpsertCacheMut.Lock()
		discountCodeUpsertCache[key] = cache
		discountCodeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single DiscountCode record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *DiscountCode) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DiscountCode provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), discountCodePrimaryKeyMapping)
	sql := "DELETE FROM \"discount_codes\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from discount_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for discount_codes")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q discountCodeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no discountCodeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from discount_codes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for discount_codes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o DiscountCodeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no DiscountCode slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(discountCodeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discountCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"discount_codes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, discountCodePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from discountCode slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for discount_codes")
	}

	if len(discountCodeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *DiscountCode) Reload(exec boil.Executor) error {
	ret, err := FindDiscountCode(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *DiscountCodeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := DiscountCodeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), discountCodePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"discount_codes\".* FROM \"discount_codes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, discountCodePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in DiscountCodeSlice")
	}

	*o = slice

	return nil
}

// DiscountCodeExists checks if the DiscountCode row exists.
func DiscountCodeExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"discount_codes\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if discount_codes exists")
	}

	return exists, nil
}
