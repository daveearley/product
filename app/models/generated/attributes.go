// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/pkg/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// Attribute is an object representing the database table.
type Attribute struct {
	ID        int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Name      string    `boil:"name" json:"name" toml:"name" yaml:"name"`
	Value     string    `boil:"value" json:"value" toml:"value" yaml:"value"`
	Type      string    `boil:"type" json:"type" toml:"type" yaml:"type"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`
	UpdatedAt time.Time `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	DeletedAt time.Time `boil:"deleted_at" json:"deleted_at" toml:"deleted_at" yaml:"deleted_at"`

	R *attributeR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L attributeL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var AttributeColumns = struct {
	ID        string
	Name      string
	Value     string
	Type      string
	CreatedAt string
	UpdatedAt string
	DeletedAt string
}{
	ID:        "id",
	Name:      "name",
	Value:     "value",
	Type:      "type",
	CreatedAt: "created_at",
	UpdatedAt: "updated_at",
	DeletedAt: "deleted_at",
}

// AttributeRels is where relationship names are stored.
var AttributeRels = struct {
	Events       string
	Tickets      string
	Transactions string
}{
	Events:       "Events",
	Tickets:      "Tickets",
	Transactions: "Transactions",
}

// attributeR is where relationships are stored.
type attributeR struct {
	Events       EventSlice
	Tickets      TicketSlice
	Transactions TransactionSlice
}

// NewStruct creates a new relationship struct
func (*attributeR) NewStruct() *attributeR {
	return &attributeR{}
}

// attributeL is where Load methods for each relationship are stored.
type attributeL struct{}

var (
	attributeColumns               = []string{"id", "name", "value", "type", "created_at", "updated_at", "deleted_at"}
	attributeColumnsWithoutDefault = []string{"name", "value", "type", "created_at", "updated_at", "deleted_at"}
	attributeColumnsWithDefault    = []string{"id"}
	attributePrimaryKeyColumns     = []string{"id"}
)

type (
	// AttributeSlice is an alias for a slice of pointers to Attribute.
	// This should generally be used opposed to []Attribute.
	AttributeSlice []*Attribute
	// AttributeHook is the signature for custom Attribute hook methods
	AttributeHook func(boil.Executor, *Attribute) error

	attributeQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	attributeType                 = reflect.TypeOf(&Attribute{})
	attributeMapping              = queries.MakeStructMapping(attributeType)
	attributePrimaryKeyMapping, _ = queries.BindMapping(attributeType, attributeMapping, attributePrimaryKeyColumns)
	attributeInsertCacheMut       sync.RWMutex
	attributeInsertCache          = make(map[string]insertCache)
	attributeUpdateCacheMut       sync.RWMutex
	attributeUpdateCache          = make(map[string]updateCache)
	attributeUpsertCacheMut       sync.RWMutex
	attributeUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
)

var attributeBeforeInsertHooks []AttributeHook
var attributeBeforeUpdateHooks []AttributeHook
var attributeBeforeDeleteHooks []AttributeHook
var attributeBeforeUpsertHooks []AttributeHook

var attributeAfterInsertHooks []AttributeHook
var attributeAfterSelectHooks []AttributeHook
var attributeAfterUpdateHooks []AttributeHook
var attributeAfterDeleteHooks []AttributeHook
var attributeAfterUpsertHooks []AttributeHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Attribute) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range attributeBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Attribute) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range attributeBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Attribute) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range attributeBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Attribute) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range attributeBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Attribute) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range attributeAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Attribute) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range attributeAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Attribute) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range attributeAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Attribute) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range attributeAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Attribute) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range attributeAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddAttributeHook registers your hook function for all future operations.
func AddAttributeHook(hookPoint boil.HookPoint, attributeHook AttributeHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		attributeBeforeInsertHooks = append(attributeBeforeInsertHooks, attributeHook)
	case boil.BeforeUpdateHook:
		attributeBeforeUpdateHooks = append(attributeBeforeUpdateHooks, attributeHook)
	case boil.BeforeDeleteHook:
		attributeBeforeDeleteHooks = append(attributeBeforeDeleteHooks, attributeHook)
	case boil.BeforeUpsertHook:
		attributeBeforeUpsertHooks = append(attributeBeforeUpsertHooks, attributeHook)
	case boil.AfterInsertHook:
		attributeAfterInsertHooks = append(attributeAfterInsertHooks, attributeHook)
	case boil.AfterSelectHook:
		attributeAfterSelectHooks = append(attributeAfterSelectHooks, attributeHook)
	case boil.AfterUpdateHook:
		attributeAfterUpdateHooks = append(attributeAfterUpdateHooks, attributeHook)
	case boil.AfterDeleteHook:
		attributeAfterDeleteHooks = append(attributeAfterDeleteHooks, attributeHook)
	case boil.AfterUpsertHook:
		attributeAfterUpsertHooks = append(attributeAfterUpsertHooks, attributeHook)
	}
}

// One returns a single attribute record from the query.
func (q attributeQuery) One(exec boil.Executor) (*Attribute, error) {
	o := &Attribute{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for attributes")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all Attribute records from the query.
func (q attributeQuery) All(exec boil.Executor) (AttributeSlice, error) {
	var o []*Attribute

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to Attribute slice")
	}

	if len(attributeAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all Attribute records in the query.
func (q attributeQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count attributes rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q attributeQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if attributes exists")
	}

	return count > 0, nil
}

// Events retrieves all the event's Events with an executor.
func (o *Attribute) Events(mods ...qm.QueryMod) eventQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"event_attributes\" on \"events\".\"id\" = \"event_attributes\".\"event_id\""),
		qm.Where("\"event_attributes\".\"attribute_id\"=?", o.ID),
	)

	query := Events(queryMods...)
	queries.SetFrom(query.Query, "\"events\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"events\".*"})
	}

	return query
}

// Tickets retrieves all the ticket's Tickets with an executor.
func (o *Attribute) Tickets(mods ...qm.QueryMod) ticketQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"ticket_attributes\" on \"tickets\".\"id\" = \"ticket_attributes\".\"ticket_id\""),
		qm.Where("\"ticket_attributes\".\"attribute_id\"=?", o.ID),
	)

	query := Tickets(queryMods...)
	queries.SetFrom(query.Query, "\"tickets\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"tickets\".*"})
	}

	return query
}

// Transactions retrieves all the transaction's Transactions with an executor.
func (o *Attribute) Transactions(mods ...qm.QueryMod) transactionQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.InnerJoin("\"transaction_attributes\" on \"transactions\".\"id\" = \"transaction_attributes\".\"transaction_id\""),
		qm.Where("\"transaction_attributes\".\"attribute_id\"=?", o.ID),
	)

	query := Transactions(queryMods...)
	queries.SetFrom(query.Query, "\"transactions\"")

	if len(queries.GetSelect(query.Query)) == 0 {
		queries.SetSelect(query.Query, []string{"\"transactions\".*"})
	}

	return query
}

// LoadEvents allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (attributeL) LoadEvents(e boil.Executor, singular bool, maybeAttribute interface{}, mods queries.Applicator) error {
	var slice []*Attribute
	var object *Attribute

	if singular {
		object = maybeAttribute.(*Attribute)
	} else {
		slice = *maybeAttribute.(*[]*Attribute)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(
		qm.Select("\"events\".*, \"a\".\"attribute_id\""),
		qm.From("\"events\""),
		qm.InnerJoin("\"event_attributes\" as \"a\" on \"events\".\"id\" = \"a\".\"event_id\""),
		qm.WhereIn("\"a\".\"attribute_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load events")
	}

	var resultSlice []*Event

	var localJoinCols []int
	for results.Next() {
		one := new(Event)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Title, &one.AccountID, &one.UserID, &one.Status, &one.StartDate, &one.EndDate, &one.CreatedAt, &one.UpdatedAt, &one.DeletedAt, &one.Description, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for events")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice events")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on events")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for events")
	}

	if len(eventAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Events = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &eventR{}
			}
			foreign.R.Attributes = append(foreign.R.Attributes, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Events = append(local.R.Events, foreign)
				if foreign.R == nil {
					foreign.R = &eventR{}
				}
				foreign.R.Attributes = append(foreign.R.Attributes, local)
				break
			}
		}
	}

	return nil
}

// LoadTickets allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (attributeL) LoadTickets(e boil.Executor, singular bool, maybeAttribute interface{}, mods queries.Applicator) error {
	var slice []*Attribute
	var object *Attribute

	if singular {
		object = maybeAttribute.(*Attribute)
	} else {
		slice = *maybeAttribute.(*[]*Attribute)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(
		qm.Select("\"tickets\".*, \"a\".\"attribute_id\""),
		qm.From("\"tickets\""),
		qm.InnerJoin("\"ticket_attributes\" as \"a\" on \"tickets\".\"id\" = \"a\".\"ticket_id\""),
		qm.WhereIn("\"a\".\"attribute_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load tickets")
	}

	var resultSlice []*Ticket

	var localJoinCols []int
	for results.Next() {
		one := new(Ticket)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.Title, &one.EventID, &one.InititalQuantityAvailable, &one.QuantitySold, &one.CreatedAt, &one.UpdatedAt, &one.DeletedAt, &one.SaleStartDate, &one.SaleEndDate, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for tickets")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice tickets")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on tickets")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tickets")
	}

	if len(ticketAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Tickets = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &ticketR{}
			}
			foreign.R.Attributes = append(foreign.R.Attributes, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Tickets = append(local.R.Tickets, foreign)
				if foreign.R == nil {
					foreign.R = &ticketR{}
				}
				foreign.R.Attributes = append(foreign.R.Attributes, local)
				break
			}
		}
	}

	return nil
}

// LoadTransactions allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (attributeL) LoadTransactions(e boil.Executor, singular bool, maybeAttribute interface{}, mods queries.Applicator) error {
	var slice []*Attribute
	var object *Attribute

	if singular {
		object = maybeAttribute.(*Attribute)
	} else {
		slice = *maybeAttribute.(*[]*Attribute)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &attributeR{}
		}
		args = append(args, object.ID)
	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &attributeR{}
			}

			for _, a := range args {
				if a == obj.ID {
					continue Outer
				}
			}

			args = append(args, obj.ID)
		}
	}

	query := NewQuery(
		qm.Select("\"transactions\".*, \"a\".\"attribute_id\""),
		qm.From("\"transactions\""),
		qm.InnerJoin("\"transaction_attributes\" as \"a\" on \"transactions\".\"id\" = \"a\".\"transaction_id\""),
		qm.WhereIn("\"a\".\"attribute_id\" in ?", args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load transactions")
	}

	var resultSlice []*Transaction

	var localJoinCols []int
	for results.Next() {
		one := new(Transaction)
		var localJoinCol int

		err = results.Scan(&one.ID, &one.EventID, &one.CustomerID, &one.Total, &one.TotalTax, &one.TotalDiscount, &one.CreatedAt, &one.UpdatedAt, &one.DeletedAt, &localJoinCol)
		if err != nil {
			return errors.Wrap(err, "failed to scan eager loaded results for transactions")
		}
		if err = results.Err(); err != nil {
			return errors.Wrap(err, "failed to plebian-bind eager loaded slice transactions")
		}

		resultSlice = append(resultSlice, one)
		localJoinCols = append(localJoinCols, localJoinCol)
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on transactions")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for transactions")
	}

	if len(transactionAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Transactions = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &transactionR{}
			}
			foreign.R.Attributes = append(foreign.R.Attributes, object)
		}
		return nil
	}

	for i, foreign := range resultSlice {
		localJoinCol := localJoinCols[i]
		for _, local := range slice {
			if local.ID == localJoinCol {
				local.R.Transactions = append(local.R.Transactions, foreign)
				if foreign.R == nil {
					foreign.R = &transactionR{}
				}
				foreign.R.Attributes = append(foreign.R.Attributes, local)
				break
			}
		}
	}

	return nil
}

// AddEvents adds the given related objects to the existing relationships
// of the attribute, optionally inserting them as new records.
// Appends related to o.R.Events.
// Sets related.R.Attributes appropriately.
func (o *Attribute) AddEvents(exec boil.Executor, insert bool, related ...*Event) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"event_attributes\" (\"attribute_id\", \"event_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &attributeR{
			Events: related,
		}
	} else {
		o.R.Events = append(o.R.Events, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &eventR{
				Attributes: AttributeSlice{o},
			}
		} else {
			rel.R.Attributes = append(rel.R.Attributes, o)
		}
	}
	return nil
}

// SetEvents removes all previously related items of the
// attribute replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Attributes's Events accordingly.
// Replaces o.R.Events with related.
// Sets related.R.Attributes's Events accordingly.
func (o *Attribute) SetEvents(exec boil.Executor, insert bool, related ...*Event) error {
	query := "delete from \"event_attributes\" where \"attribute_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeEventsFromAttributesSlice(o, related)
	if o.R != nil {
		o.R.Events = nil
	}
	return o.AddEvents(exec, insert, related...)
}

// RemoveEvents relationships from objects passed in.
// Removes related items from R.Events (uses pointer comparison, removal does not keep order)
// Sets related.R.Attributes.
func (o *Attribute) RemoveEvents(exec boil.Executor, related ...*Event) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"event_attributes\" where \"attribute_id\" = $1 and \"event_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeEventsFromAttributesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Events {
			if rel != ri {
				continue
			}

			ln := len(o.R.Events)
			if ln > 1 && i < ln-1 {
				o.R.Events[i] = o.R.Events[ln-1]
			}
			o.R.Events = o.R.Events[:ln-1]
			break
		}
	}

	return nil
}

func removeEventsFromAttributesSlice(o *Attribute, related []*Event) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Attributes {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Attributes)
			if ln > 1 && i < ln-1 {
				rel.R.Attributes[i] = rel.R.Attributes[ln-1]
			}
			rel.R.Attributes = rel.R.Attributes[:ln-1]
			break
		}
	}
}

// AddTickets adds the given related objects to the existing relationships
// of the attribute, optionally inserting them as new records.
// Appends related to o.R.Tickets.
// Sets related.R.Attributes appropriately.
func (o *Attribute) AddTickets(exec boil.Executor, insert bool, related ...*Ticket) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"ticket_attributes\" (\"attribute_id\", \"ticket_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &attributeR{
			Tickets: related,
		}
	} else {
		o.R.Tickets = append(o.R.Tickets, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &ticketR{
				Attributes: AttributeSlice{o},
			}
		} else {
			rel.R.Attributes = append(rel.R.Attributes, o)
		}
	}
	return nil
}

// SetTickets removes all previously related items of the
// attribute replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Attributes's Tickets accordingly.
// Replaces o.R.Tickets with related.
// Sets related.R.Attributes's Tickets accordingly.
func (o *Attribute) SetTickets(exec boil.Executor, insert bool, related ...*Ticket) error {
	query := "delete from \"ticket_attributes\" where \"attribute_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeTicketsFromAttributesSlice(o, related)
	if o.R != nil {
		o.R.Tickets = nil
	}
	return o.AddTickets(exec, insert, related...)
}

// RemoveTickets relationships from objects passed in.
// Removes related items from R.Tickets (uses pointer comparison, removal does not keep order)
// Sets related.R.Attributes.
func (o *Attribute) RemoveTickets(exec boil.Executor, related ...*Ticket) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"ticket_attributes\" where \"attribute_id\" = $1 and \"ticket_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeTicketsFromAttributesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Tickets {
			if rel != ri {
				continue
			}

			ln := len(o.R.Tickets)
			if ln > 1 && i < ln-1 {
				o.R.Tickets[i] = o.R.Tickets[ln-1]
			}
			o.R.Tickets = o.R.Tickets[:ln-1]
			break
		}
	}

	return nil
}

func removeTicketsFromAttributesSlice(o *Attribute, related []*Ticket) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Attributes {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Attributes)
			if ln > 1 && i < ln-1 {
				rel.R.Attributes[i] = rel.R.Attributes[ln-1]
			}
			rel.R.Attributes = rel.R.Attributes[:ln-1]
			break
		}
	}
}

// AddTransactions adds the given related objects to the existing relationships
// of the attribute, optionally inserting them as new records.
// Appends related to o.R.Transactions.
// Sets related.R.Attributes appropriately.
func (o *Attribute) AddTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	var err error
	for _, rel := range related {
		if insert {
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		}
	}

	for _, rel := range related {
		query := "insert into \"transaction_attributes\" (\"attribute_id\", \"transaction_id\") values ($1, $2)"
		values := []interface{}{o.ID, rel.ID}

		if boil.DebugMode {
			fmt.Fprintln(boil.DebugWriter, query)
			fmt.Fprintln(boil.DebugWriter, values)
		}

		_, err = exec.Exec(query, values...)
		if err != nil {
			return errors.Wrap(err, "failed to insert into join table")
		}
	}
	if o.R == nil {
		o.R = &attributeR{
			Transactions: related,
		}
	} else {
		o.R.Transactions = append(o.R.Transactions, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &transactionR{
				Attributes: AttributeSlice{o},
			}
		} else {
			rel.R.Attributes = append(rel.R.Attributes, o)
		}
	}
	return nil
}

// SetTransactions removes all previously related items of the
// attribute replacing them completely with the passed
// in related items, optionally inserting them as new records.
// Sets o.R.Attributes's Transactions accordingly.
// Replaces o.R.Transactions with related.
// Sets related.R.Attributes's Transactions accordingly.
func (o *Attribute) SetTransactions(exec boil.Executor, insert bool, related ...*Transaction) error {
	query := "delete from \"transaction_attributes\" where \"attribute_id\" = $1"
	values := []interface{}{o.ID}
	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err := exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}

	removeTransactionsFromAttributesSlice(o, related)
	if o.R != nil {
		o.R.Transactions = nil
	}
	return o.AddTransactions(exec, insert, related...)
}

// RemoveTransactions relationships from objects passed in.
// Removes related items from R.Transactions (uses pointer comparison, removal does not keep order)
// Sets related.R.Attributes.
func (o *Attribute) RemoveTransactions(exec boil.Executor, related ...*Transaction) error {
	var err error
	query := fmt.Sprintf(
		"delete from \"transaction_attributes\" where \"attribute_id\" = $1 and \"transaction_id\" in (%s)",
		strmangle.Placeholders(dialect.UseIndexPlaceholders, len(related), 2, 1),
	)
	values := []interface{}{o.ID}
	for _, rel := range related {
		values = append(values, rel.ID)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	_, err = exec.Exec(query, values...)
	if err != nil {
		return errors.Wrap(err, "failed to remove relationships before set")
	}
	removeTransactionsFromAttributesSlice(o, related)
	if o.R == nil {
		return nil
	}

	for _, rel := range related {
		for i, ri := range o.R.Transactions {
			if rel != ri {
				continue
			}

			ln := len(o.R.Transactions)
			if ln > 1 && i < ln-1 {
				o.R.Transactions[i] = o.R.Transactions[ln-1]
			}
			o.R.Transactions = o.R.Transactions[:ln-1]
			break
		}
	}

	return nil
}

func removeTransactionsFromAttributesSlice(o *Attribute, related []*Transaction) {
	for _, rel := range related {
		if rel.R == nil {
			continue
		}
		for i, ri := range rel.R.Attributes {
			if o.ID != ri.ID {
				continue
			}

			ln := len(rel.R.Attributes)
			if ln > 1 && i < ln-1 {
				rel.R.Attributes[i] = rel.R.Attributes[ln-1]
			}
			rel.R.Attributes = rel.R.Attributes[:ln-1]
			break
		}
	}
}

// Attributes retrieves all the records using an executor.
func Attributes(mods ...qm.QueryMod) attributeQuery {
	mods = append(mods, qm.From("\"attributes\""))
	return attributeQuery{NewQuery(mods...)}
}

// FindAttribute retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindAttribute(exec boil.Executor, iD int, selectCols ...string) (*Attribute, error) {
	attributeObj := &Attribute{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"attributes\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, attributeObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from attributes")
	}

	return attributeObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Attribute) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no attributes provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	if o.UpdatedAt.IsZero() {
		o.UpdatedAt = currTime
	}

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attributeColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	attributeInsertCacheMut.RLock()
	cache, cached := attributeInsertCache[key]
	attributeInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			attributeColumns,
			attributeColumnsWithDefault,
			attributeColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(attributeType, attributeMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(attributeType, attributeMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"attributes\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"attributes\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into attributes")
	}

	if !cached {
		attributeInsertCacheMut.Lock()
		attributeInsertCache[key] = cache
		attributeInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// Update uses an executor to update the Attribute.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Attribute) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	currTime := time.Now().In(boil.GetLocation())

	o.UpdatedAt = currTime

	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	attributeUpdateCacheMut.RLock()
	cache, cached := attributeUpdateCache[key]
	attributeUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			attributeColumns,
			attributePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update attributes, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"attributes\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, attributePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(attributeType, attributeMapping, append(wl, attributePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}

	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update attributes row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for attributes")
	}

	if !cached {
		attributeUpdateCacheMut.Lock()
		attributeUpdateCache[key] = cache
		attributeUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAll updates all rows with the specified column values.
func (q attributeQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for attributes")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o AttributeSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"attributes\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, attributePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in attribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all attribute")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Attribute) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no attributes provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if o.CreatedAt.IsZero() {
		o.CreatedAt = currTime
	}
	o.UpdatedAt = currTime

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(attributeColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	attributeUpsertCacheMut.RLock()
	cache, cached := attributeUpsertCache[key]
	attributeUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			attributeColumns,
			attributeColumnsWithDefault,
			attributeColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			attributeColumns,
			attributePrimaryKeyColumns,
		)

		if len(update) == 0 {
			return errors.New("models: unable to upsert attributes, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(attributePrimaryKeyColumns))
			copy(conflict, attributePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"attributes\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(attributeType, attributeMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(attributeType, attributeMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert attributes")
	}

	if !cached {
		attributeUpsertCacheMut.Lock()
		attributeUpsertCache[key] = cache
		attributeUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// Delete deletes a single Attribute record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Attribute) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Attribute provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), attributePrimaryKeyMapping)
	sql := "DELETE FROM \"attributes\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for attributes")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q attributeQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no attributeQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from attributes")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for attributes")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o AttributeSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no Attribute slice provided for delete all")
	}

	if len(o) == 0 {
		return 0, nil
	}

	if len(attributeBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"attributes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}

	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from attribute slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for attributes")
	}

	if len(attributeAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Attribute) Reload(exec boil.Executor) error {
	ret, err := FindAttribute(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *AttributeSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := AttributeSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), attributePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"attributes\".* FROM \"attributes\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, attributePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in AttributeSlice")
	}

	*o = slice

	return nil
}

// AttributeExists checks if the Attribute row exists.
func AttributeExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"attributes\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}

	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if attributes exists")
	}

	return exists, nil
}
