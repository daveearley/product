// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTransactionItems(t *testing.T) {
	t.Parallel()

	query := TransactionItems()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTransactionItemsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionItem{}
	if err = randomize.Struct(seed, o, transactionItemDBTypes, true, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TransactionItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTransactionItemsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionItem{}
	if err = randomize.Struct(seed, o, transactionItemDBTypes, true, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := TransactionItems().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TransactionItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTransactionItemsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionItem{}
	if err = randomize.Struct(seed, o, transactionItemDBTypes, true, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TransactionItemSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := TransactionItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTransactionItemsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionItem{}
	if err = randomize.Struct(seed, o, transactionItemDBTypes, true, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TransactionItemExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if TransactionItem exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TransactionItemExists to return true, but got false.")
	}
}

func testTransactionItemsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionItem{}
	if err = randomize.Struct(seed, o, transactionItemDBTypes, true, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	transactionItemFound, err := FindTransactionItem(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if transactionItemFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTransactionItemsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionItem{}
	if err = randomize.Struct(seed, o, transactionItemDBTypes, true, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = TransactionItems().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testTransactionItemsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionItem{}
	if err = randomize.Struct(seed, o, transactionItemDBTypes, true, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := TransactionItems().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTransactionItemsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	transactionItemOne := &TransactionItem{}
	transactionItemTwo := &TransactionItem{}
	if err = randomize.Struct(seed, transactionItemOne, transactionItemDBTypes, false, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}
	if err = randomize.Struct(seed, transactionItemTwo, transactionItemDBTypes, false, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = transactionItemOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = transactionItemTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TransactionItems().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTransactionItemsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	transactionItemOne := &TransactionItem{}
	transactionItemTwo := &TransactionItem{}
	if err = randomize.Struct(seed, transactionItemOne, transactionItemDBTypes, false, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}
	if err = randomize.Struct(seed, transactionItemTwo, transactionItemDBTypes, false, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = transactionItemOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = transactionItemTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TransactionItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func transactionItemBeforeInsertHook(e boil.Executor, o *TransactionItem) error {
	*o = TransactionItem{}
	return nil
}

func transactionItemAfterInsertHook(e boil.Executor, o *TransactionItem) error {
	*o = TransactionItem{}
	return nil
}

func transactionItemAfterSelectHook(e boil.Executor, o *TransactionItem) error {
	*o = TransactionItem{}
	return nil
}

func transactionItemBeforeUpdateHook(e boil.Executor, o *TransactionItem) error {
	*o = TransactionItem{}
	return nil
}

func transactionItemAfterUpdateHook(e boil.Executor, o *TransactionItem) error {
	*o = TransactionItem{}
	return nil
}

func transactionItemBeforeDeleteHook(e boil.Executor, o *TransactionItem) error {
	*o = TransactionItem{}
	return nil
}

func transactionItemAfterDeleteHook(e boil.Executor, o *TransactionItem) error {
	*o = TransactionItem{}
	return nil
}

func transactionItemBeforeUpsertHook(e boil.Executor, o *TransactionItem) error {
	*o = TransactionItem{}
	return nil
}

func transactionItemAfterUpsertHook(e boil.Executor, o *TransactionItem) error {
	*o = TransactionItem{}
	return nil
}

func testTransactionItemsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &TransactionItem{}
	o := &TransactionItem{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, transactionItemDBTypes, false); err != nil {
		t.Errorf("Unable to randomize TransactionItem object: %s", err)
	}

	AddTransactionItemHook(boil.BeforeInsertHook, transactionItemBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	transactionItemBeforeInsertHooks = []TransactionItemHook{}

	AddTransactionItemHook(boil.AfterInsertHook, transactionItemAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	transactionItemAfterInsertHooks = []TransactionItemHook{}

	AddTransactionItemHook(boil.AfterSelectHook, transactionItemAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	transactionItemAfterSelectHooks = []TransactionItemHook{}

	AddTransactionItemHook(boil.BeforeUpdateHook, transactionItemBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	transactionItemBeforeUpdateHooks = []TransactionItemHook{}

	AddTransactionItemHook(boil.AfterUpdateHook, transactionItemAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	transactionItemAfterUpdateHooks = []TransactionItemHook{}

	AddTransactionItemHook(boil.BeforeDeleteHook, transactionItemBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	transactionItemBeforeDeleteHooks = []TransactionItemHook{}

	AddTransactionItemHook(boil.AfterDeleteHook, transactionItemAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	transactionItemAfterDeleteHooks = []TransactionItemHook{}

	AddTransactionItemHook(boil.BeforeUpsertHook, transactionItemBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	transactionItemBeforeUpsertHooks = []TransactionItemHook{}

	AddTransactionItemHook(boil.AfterUpsertHook, transactionItemAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	transactionItemAfterUpsertHooks = []TransactionItemHook{}
}

func testTransactionItemsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionItem{}
	if err = randomize.Struct(seed, o, transactionItemDBTypes, true, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TransactionItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTransactionItemsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionItem{}
	if err = randomize.Struct(seed, o, transactionItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(transactionItemColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := TransactionItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTransactionItemToOneTransactionUsingTransaction(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TransactionItem
	var foreign Transaction

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, transactionItemDBTypes, false, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Transaction struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TransactionID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Transaction().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TransactionItemSlice{&local}
	if err = local.L.LoadTransaction(tx, false, (*[]*TransactionItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Transaction == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Transaction = nil
	if err = local.L.LoadTransaction(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Transaction == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTransactionItemToOneTicketUsingTicket(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local TransactionItem
	var foreign Ticket

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, transactionItemDBTypes, false, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.TicketID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Ticket().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TransactionItemSlice{&local}
	if err = local.L.LoadTicket(tx, false, (*[]*TransactionItem)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ticket == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Ticket = nil
	if err = local.L.LoadTicket(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Ticket == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTransactionItemToOneSetOpTransactionUsingTransaction(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TransactionItem
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, transactionItemDBTypes, false, strmangle.SetComplement(transactionItemPrimaryKeyColumns, transactionItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Transaction{&b, &c} {
		err = a.SetTransaction(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Transaction != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TransactionItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TransactionID != x.ID {
			t.Error("foreign key was wrong value", a.TransactionID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TransactionID))
		reflect.Indirect(reflect.ValueOf(&a.TransactionID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TransactionID != x.ID {
			t.Error("foreign key was wrong value", a.TransactionID, x.ID)
		}
	}
}
func testTransactionItemToOneSetOpTicketUsingTicket(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a TransactionItem
	var b, c Ticket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, transactionItemDBTypes, false, strmangle.SetComplement(transactionItemPrimaryKeyColumns, transactionItemColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Ticket{&b, &c} {
		err = a.SetTicket(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Ticket != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.TransactionItems[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.TicketID != x.ID {
			t.Error("foreign key was wrong value", a.TicketID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.TicketID))
		reflect.Indirect(reflect.ValueOf(&a.TicketID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.TicketID != x.ID {
			t.Error("foreign key was wrong value", a.TicketID, x.ID)
		}
	}
}

func testTransactionItemsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionItem{}
	if err = randomize.Struct(seed, o, transactionItemDBTypes, true, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTransactionItemsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionItem{}
	if err = randomize.Struct(seed, o, transactionItemDBTypes, true, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TransactionItemSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testTransactionItemsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &TransactionItem{}
	if err = randomize.Struct(seed, o, transactionItemDBTypes, true, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := TransactionItems().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	transactionItemDBTypes = map[string]string{`ID`: `integer`, `Quantity`: `integer`, `TicketID`: `integer`, `Total`: `numeric`, `TotalDiscount`: `numeric`, `TotalTax`: `numeric`, `TransactionID`: `integer`}
	_                      = bytes.MinRead
)

func testTransactionItemsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(transactionItemPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(transactionItemColumns) == len(transactionItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TransactionItem{}
	if err = randomize.Struct(seed, o, transactionItemDBTypes, true, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TransactionItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, transactionItemDBTypes, true, transactionItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTransactionItemsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(transactionItemColumns) == len(transactionItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &TransactionItem{}
	if err = randomize.Struct(seed, o, transactionItemDBTypes, true, transactionItemColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := TransactionItems().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, transactionItemDBTypes, true, transactionItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(transactionItemColumns, transactionItemPrimaryKeyColumns) {
		fields = transactionItemColumns
	} else {
		fields = strmangle.SetComplement(
			transactionItemColumns,
			transactionItemPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TransactionItemSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTransactionItemsUpsert(t *testing.T) {
	t.Parallel()

	if len(transactionItemColumns) == len(transactionItemPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := TransactionItem{}
	if err = randomize.Struct(seed, &o, transactionItemDBTypes, true); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TransactionItem: %s", err)
	}

	count, err := TransactionItems().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, transactionItemDBTypes, false, transactionItemPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize TransactionItem struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert TransactionItem: %s", err)
	}

	count, err = TransactionItems().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
