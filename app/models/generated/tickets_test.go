// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testTickets(t *testing.T) {
	t.Parallel()

	query := Tickets()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testTicketsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tickets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Tickets().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tickets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TicketSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Tickets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testTicketsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := TicketExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Ticket exists: %s", err)
	}
	if !e {
		t.Errorf("Expected TicketExists to return true, but got false.")
	}
}

func testTicketsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	ticketFound, err := FindTicket(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if ticketFound == nil {
		t.Error("want a record, got nil")
	}
}

func testTicketsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Tickets().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testTicketsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Tickets().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testTicketsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	ticketOne := &Ticket{}
	ticketTwo := &Ticket{}
	if err = randomize.Struct(seed, ticketOne, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}
	if err = randomize.Struct(seed, ticketTwo, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = ticketOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ticketTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tickets().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testTicketsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	ticketOne := &Ticket{}
	ticketTwo := &Ticket{}
	if err = randomize.Struct(seed, ticketOne, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}
	if err = randomize.Struct(seed, ticketTwo, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = ticketOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = ticketTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tickets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func ticketBeforeInsertHook(e boil.Executor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func ticketAfterInsertHook(e boil.Executor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func ticketAfterSelectHook(e boil.Executor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func ticketBeforeUpdateHook(e boil.Executor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func ticketAfterUpdateHook(e boil.Executor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func ticketBeforeDeleteHook(e boil.Executor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func ticketAfterDeleteHook(e boil.Executor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func ticketBeforeUpsertHook(e boil.Executor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func ticketAfterUpsertHook(e boil.Executor, o *Ticket) error {
	*o = Ticket{}
	return nil
}

func testTicketsHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Ticket{}
	o := &Ticket{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, ticketDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Ticket object: %s", err)
	}

	AddTicketHook(boil.BeforeInsertHook, ticketBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	ticketBeforeInsertHooks = []TicketHook{}

	AddTicketHook(boil.AfterInsertHook, ticketAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	ticketAfterInsertHooks = []TicketHook{}

	AddTicketHook(boil.AfterSelectHook, ticketAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	ticketAfterSelectHooks = []TicketHook{}

	AddTicketHook(boil.BeforeUpdateHook, ticketBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	ticketBeforeUpdateHooks = []TicketHook{}

	AddTicketHook(boil.AfterUpdateHook, ticketAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	ticketAfterUpdateHooks = []TicketHook{}

	AddTicketHook(boil.BeforeDeleteHook, ticketBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	ticketBeforeDeleteHooks = []TicketHook{}

	AddTicketHook(boil.AfterDeleteHook, ticketAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	ticketAfterDeleteHooks = []TicketHook{}

	AddTicketHook(boil.BeforeUpsertHook, ticketBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	ticketBeforeUpsertHooks = []TicketHook{}

	AddTicketHook(boil.AfterUpsertHook, ticketAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	ticketAfterUpsertHooks = []TicketHook{}
}

func testTicketsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tickets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTicketsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(ticketColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Tickets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testTicketToManyAttendees(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Ticket
	var b, c Attendee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, attendeeDBTypes, false, attendeeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attendeeDBTypes, false, attendeeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TicketID = a.ID
	c.TicketID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	attendee, err := a.Attendees().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range attendee {
		if v.TicketID == b.TicketID {
			bFound = true
		}
		if v.TicketID == c.TicketID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TicketSlice{&a}
	if err = a.L.LoadAttendees(tx, false, (*[]*Ticket)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Attendees); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Attendees = nil
	if err = a.L.LoadAttendees(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Attendees); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", attendee)
	}
}

func testTicketToManyAttributes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Ticket
	var b, c Attribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"ticket_attributes\" (\"ticket_id\", \"attribute_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"ticket_attributes\" (\"ticket_id\", \"attribute_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	attribute, err := a.Attributes().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range attribute {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TicketSlice{&a}
	if err = a.L.LoadAttributes(tx, false, (*[]*Ticket)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Attributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Attributes = nil
	if err = a.L.LoadAttributes(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Attributes); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", attribute)
	}
}

func testTicketToManyQuestions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Ticket
	var b, c Question

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, questionDBTypes, false, questionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, questionDBTypes, false, questionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"ticket_questions\" (\"ticket_id\", \"question_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"ticket_questions\" (\"ticket_id\", \"question_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	question, err := a.Questions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range question {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TicketSlice{&a}
	if err = a.L.LoadQuestions(tx, false, (*[]*Ticket)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Questions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Questions = nil
	if err = a.L.LoadQuestions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Questions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", question)
	}
}

func testTicketToManyTransactionItems(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Ticket
	var b, c TransactionItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, transactionItemDBTypes, false, transactionItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionItemDBTypes, false, transactionItemColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	b.TicketID = a.ID
	c.TicketID = a.ID

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	transactionItem, err := a.TransactionItems().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range transactionItem {
		if v.TicketID == b.TicketID {
			bFound = true
		}
		if v.TicketID == c.TicketID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := TicketSlice{&a}
	if err = a.L.LoadTransactionItems(tx, false, (*[]*Ticket)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TransactionItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.TransactionItems = nil
	if err = a.L.LoadTransactionItems(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.TransactionItems); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", transactionItem)
	}
}

func testTicketToManyAddOpAttendees(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Ticket
	var b, c, d, e Attendee

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Attendee{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, attendeeDBTypes, false, strmangle.SetComplement(attendeePrimaryKeyColumns, attendeeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Attendee{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAttendees(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TicketID {
			t.Error("foreign key was wrong value", a.ID, first.TicketID)
		}
		if a.ID != second.TicketID {
			t.Error("foreign key was wrong value", a.ID, second.TicketID)
		}

		if first.R.Ticket != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Ticket != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.Attendees[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Attendees[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Attendees().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTicketToManyAddOpAttributes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Ticket
	var b, c, d, e Attribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Attribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Attribute{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddAttributes(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Tickets[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Tickets[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Attributes[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Attributes[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Attributes().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTicketToManySetOpAttributes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Ticket
	var b, c, d, e Attribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Attribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetAttributes(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Attributes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetAttributes(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Attributes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Tickets) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Tickets) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Tickets[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Tickets[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Attributes[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Attributes[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTicketToManyRemoveOpAttributes(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Ticket
	var b, c, d, e Attribute

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Attribute{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddAttributes(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Attributes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveAttributes(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Attributes().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Tickets) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Tickets) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Tickets[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Tickets[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Attributes) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Attributes[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Attributes[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTicketToManyAddOpQuestions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Ticket
	var b, c, d, e Question

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Question{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, questionDBTypes, false, strmangle.SetComplement(questionPrimaryKeyColumns, questionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Question{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddQuestions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Tickets[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Tickets[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Questions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Questions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Questions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testTicketToManySetOpQuestions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Ticket
	var b, c, d, e Question

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Question{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, questionDBTypes, false, strmangle.SetComplement(questionPrimaryKeyColumns, questionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetQuestions(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Questions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetQuestions(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Questions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Tickets) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Tickets) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Tickets[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Tickets[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Questions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Questions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testTicketToManyRemoveOpQuestions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Ticket
	var b, c, d, e Question

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Question{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, questionDBTypes, false, strmangle.SetComplement(questionPrimaryKeyColumns, questionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddQuestions(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Questions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveQuestions(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Questions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Tickets) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Tickets) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Tickets[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Tickets[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Questions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Questions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Questions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testTicketToManyAddOpTransactionItems(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Ticket
	var b, c, d, e TransactionItem

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*TransactionItem{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionItemDBTypes, false, strmangle.SetComplement(transactionItemPrimaryKeyColumns, transactionItemColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*TransactionItem{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTransactionItems(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if a.ID != first.TicketID {
			t.Error("foreign key was wrong value", a.ID, first.TicketID)
		}
		if a.ID != second.TicketID {
			t.Error("foreign key was wrong value", a.ID, second.TicketID)
		}

		if first.R.Ticket != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Ticket != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.TransactionItems[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.TransactionItems[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.TransactionItems().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}
func testTicketToOneEventUsingEvent(t *testing.T) {

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var local Ticket
	var foreign Event

	seed := randomize.NewSeed()
	if err := randomize.Struct(seed, &local, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}
	if err := randomize.Struct(seed, &foreign, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Event struct: %s", err)
	}

	if err := foreign.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	local.EventID = foreign.ID
	if err := local.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := local.Event().One(tx)
	if err != nil {
		t.Fatal(err)
	}

	if check.ID != foreign.ID {
		t.Errorf("want: %v, got %v", foreign.ID, check.ID)
	}

	slice := TicketSlice{&local}
	if err = local.L.LoadEvent(tx, false, (*[]*Ticket)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Event == nil {
		t.Error("struct should have been eager loaded")
	}

	local.R.Event = nil
	if err = local.L.LoadEvent(tx, true, &local, nil); err != nil {
		t.Fatal(err)
	}
	if local.R.Event == nil {
		t.Error("struct should have been eager loaded")
	}
}

func testTicketToOneSetOpEventUsingEvent(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Ticket
	var b, c Event

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &b, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	for i, x := range []*Event{&b, &c} {
		err = a.SetEvent(tx, i != 0, x)
		if err != nil {
			t.Fatal(err)
		}

		if a.R.Event != x {
			t.Error("relationship struct not set to correct value")
		}

		if x.R.Tickets[0] != &a {
			t.Error("failed to append to foreign relationship struct")
		}
		if a.EventID != x.ID {
			t.Error("foreign key was wrong value", a.EventID)
		}

		zero := reflect.Zero(reflect.TypeOf(a.EventID))
		reflect.Indirect(reflect.ValueOf(&a.EventID)).Set(zero)

		if err = a.Reload(tx); err != nil {
			t.Fatal("failed to reload", err)
		}

		if a.EventID != x.ID {
			t.Error("foreign key was wrong value", a.EventID, x.ID)
		}
	}
}

func testTicketsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testTicketsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := TicketSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testTicketsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Tickets().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	ticketDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`, `EventID`: `integer`, `ID`: `integer`, `IntitalQuantityAvailable`: `integer`, `QuantitySold`: `integer`, `SaleEndDate`: `timestamp without time zone`, `SaleStartDate`: `timestamp without time zone`, `Title`: `character varying`, `UpdatedAt`: `timestamp without time zone`}
	_             = bytes.MinRead
)

func testTicketsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(ticketPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(ticketColumns) == len(ticketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tickets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testTicketsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(ticketColumns) == len(ticketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Ticket{}
	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Tickets().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, ticketDBTypes, true, ticketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(ticketColumns, ticketPrimaryKeyColumns) {
		fields = ticketColumns
	} else {
		fields = strmangle.SetComplement(
			ticketColumns,
			ticketPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := TicketSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testTicketsUpsert(t *testing.T) {
	t.Parallel()

	if len(ticketColumns) == len(ticketPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Ticket{}
	if err = randomize.Struct(seed, &o, ticketDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ticket: %s", err)
	}

	count, err := Tickets().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, ticketDBTypes, false, ticketPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Ticket struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Ticket: %s", err)
	}

	count, err = Tickets().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
