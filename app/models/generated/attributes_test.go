// Code generated by SQLBoiler (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAttributes(t *testing.T) {
	t.Parallel()

	query := Attributes()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAttributesDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Attributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributesQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Attributes().DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Attributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributesSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttributeSlice{o}

	if rowsAff, err := slice.DeleteAll(tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Attributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAttributesExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AttributeExists(tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Attribute exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AttributeExists to return true, but got false.")
	}
}

func testAttributesFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	attributeFound, err := FindAttribute(tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if attributeFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAttributesBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Attributes().Bind(nil, tx, o); err != nil {
		t.Error(err)
	}
}

func testAttributesOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Attributes().One(tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAttributesAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	attributeOne := &Attribute{}
	attributeTwo := &Attribute{}
	if err = randomize.Struct(seed, attributeOne, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}
	if err = randomize.Struct(seed, attributeTwo, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = attributeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attributeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Attributes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAttributesCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	attributeOne := &Attribute{}
	attributeTwo := &Attribute{}
	if err = randomize.Struct(seed, attributeOne, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}
	if err = randomize.Struct(seed, attributeTwo, attributeDBTypes, false, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = attributeOne.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = attributeTwo.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func attributeBeforeInsertHook(e boil.Executor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func attributeAfterInsertHook(e boil.Executor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func attributeAfterSelectHook(e boil.Executor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func attributeBeforeUpdateHook(e boil.Executor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func attributeAfterUpdateHook(e boil.Executor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func attributeBeforeDeleteHook(e boil.Executor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func attributeAfterDeleteHook(e boil.Executor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func attributeBeforeUpsertHook(e boil.Executor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func attributeAfterUpsertHook(e boil.Executor, o *Attribute) error {
	*o = Attribute{}
	return nil
}

func testAttributesHooks(t *testing.T) {
	t.Parallel()

	var err error

	empty := &Attribute{}
	o := &Attribute{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, attributeDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Attribute object: %s", err)
	}

	AddAttributeHook(boil.BeforeInsertHook, attributeBeforeInsertHook)
	if err = o.doBeforeInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	attributeBeforeInsertHooks = []AttributeHook{}

	AddAttributeHook(boil.AfterInsertHook, attributeAfterInsertHook)
	if err = o.doAfterInsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	attributeAfterInsertHooks = []AttributeHook{}

	AddAttributeHook(boil.AfterSelectHook, attributeAfterSelectHook)
	if err = o.doAfterSelectHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	attributeAfterSelectHooks = []AttributeHook{}

	AddAttributeHook(boil.BeforeUpdateHook, attributeBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	attributeBeforeUpdateHooks = []AttributeHook{}

	AddAttributeHook(boil.AfterUpdateHook, attributeAfterUpdateHook)
	if err = o.doAfterUpdateHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	attributeAfterUpdateHooks = []AttributeHook{}

	AddAttributeHook(boil.BeforeDeleteHook, attributeBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	attributeBeforeDeleteHooks = []AttributeHook{}

	AddAttributeHook(boil.AfterDeleteHook, attributeAfterDeleteHook)
	if err = o.doAfterDeleteHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	attributeAfterDeleteHooks = []AttributeHook{}

	AddAttributeHook(boil.BeforeUpsertHook, attributeBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	attributeBeforeUpsertHooks = []AttributeHook{}

	AddAttributeHook(boil.AfterUpsertHook, attributeAfterUpsertHook)
	if err = o.doAfterUpsertHooks(nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	attributeAfterUpsertHooks = []AttributeHook{}
}

func testAttributesInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttributesInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Whitelist(attributeColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Attributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAttributeToManyEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c Event

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, eventDBTypes, false, eventColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"event_attributes\" (\"attribute_id\", \"event_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"event_attributes\" (\"attribute_id\", \"event_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	event, err := a.Events().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range event {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AttributeSlice{&a}
	if err = a.L.LoadEvents(tx, false, (*[]*Attribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Events); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Events = nil
	if err = a.L.LoadEvents(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Events); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", event)
	}
}

func testAttributeToManyTickets(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c Ticket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, ticketDBTypes, false, ticketColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"ticket_attributes\" (\"attribute_id\", \"ticket_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"ticket_attributes\" (\"attribute_id\", \"ticket_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	ticket, err := a.Tickets().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range ticket {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AttributeSlice{&a}
	if err = a.L.LoadTickets(tx, false, (*[]*Attribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tickets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Tickets = nil
	if err = a.L.LoadTickets(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Tickets); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", ticket)
	}
}

func testAttributeToManyTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, transactionDBTypes, false, transactionColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	_, err = tx.Exec("insert into \"transaction_attributes\" (\"attribute_id\", \"transaction_id\") values ($1, $2)", a.ID, b.ID)
	if err != nil {
		t.Fatal(err)
	}
	_, err = tx.Exec("insert into \"transaction_attributes\" (\"attribute_id\", \"transaction_id\") values ($1, $2)", a.ID, c.ID)
	if err != nil {
		t.Fatal(err)
	}

	transaction, err := a.Transactions().All(tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range transaction {
		if v.ID == b.ID {
			bFound = true
		}
		if v.ID == c.ID {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := AttributeSlice{&a}
	if err = a.L.LoadTransactions(tx, false, (*[]*Attribute)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Transactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.Transactions = nil
	if err = a.L.LoadTransactions(tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.Transactions); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", transaction)
	}
}

func testAttributeToManyAddOpEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c, d, e Event

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Event{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Event{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddEvents(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Attributes[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Attributes[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Events[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Events[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Events().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAttributeToManySetOpEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c, d, e Event

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Event{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetEvents(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Events().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetEvents(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Events().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Attributes) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Attributes) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Attributes[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Attributes[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Events[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Events[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAttributeToManyRemoveOpEvents(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c, d, e Event

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Event{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, eventDBTypes, false, strmangle.SetComplement(eventPrimaryKeyColumns, eventColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddEvents(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Events().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveEvents(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Events().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Attributes) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Attributes) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Attributes[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Attributes[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Events) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Events[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Events[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAttributeToManyAddOpTickets(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c, d, e Ticket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Ticket{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Ticket{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTickets(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Attributes[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Attributes[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Tickets[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Tickets[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Tickets().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAttributeToManySetOpTickets(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c, d, e Ticket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Ticket{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTickets(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Tickets().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTickets(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Tickets().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Attributes) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Attributes) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Attributes[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Attributes[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Tickets[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Tickets[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAttributeToManyRemoveOpTickets(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c, d, e Ticket

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Ticket{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, ticketDBTypes, false, strmangle.SetComplement(ticketPrimaryKeyColumns, ticketColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTickets(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Tickets().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTickets(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Tickets().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Attributes) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Attributes) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Attributes[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Attributes[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Tickets) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Tickets[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Tickets[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAttributeToManyAddOpTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*Transaction{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddTransactions(tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if first.R.Attributes[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}
		if second.R.Attributes[0] != &a {
			t.Error("relationship was not added properly to the slice")
		}

		if a.R.Transactions[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.Transactions[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.Transactions().Count(tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testAttributeToManySetOpTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetTransactions(tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Transactions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetTransactions(tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Transactions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	// The following checks cannot be implemented since we have no handle
	// to these when we call Set(). Leaving them here as wishful thinking
	// and to let people know there's dragons.
	//
	// if len(b.R.Attributes) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	// if len(c.R.Attributes) != 0 {
	// 	t.Error("relationship was not removed properly from the slice")
	// }
	if d.R.Attributes[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}
	if e.R.Attributes[0] != &a {
		t.Error("relationship was not added properly to the slice")
	}

	if a.R.Transactions[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.Transactions[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testAttributeToManyRemoveOpTransactions(t *testing.T) {
	var err error

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()

	var a Attribute
	var b, c, d, e Transaction

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, attributeDBTypes, false, strmangle.SetComplement(attributePrimaryKeyColumns, attributeColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*Transaction{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, transactionDBTypes, false, strmangle.SetComplement(transactionPrimaryKeyColumns, transactionColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddTransactions(tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.Transactions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveTransactions(tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.Transactions().Count(tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if len(b.R.Attributes) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if len(c.R.Attributes) != 0 {
		t.Error("relationship was not removed properly from the slice")
	}
	if d.R.Attributes[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Attributes[0] != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if len(a.R.Transactions) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.Transactions[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.Transactions[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testAttributesReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(tx); err != nil {
		t.Error(err)
	}
}

func testAttributesReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AttributeSlice{o}

	if err = slice.ReloadAll(tx); err != nil {
		t.Error(err)
	}
}

func testAttributesSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Attributes().All(tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	attributeDBTypes = map[string]string{`CreatedAt`: `timestamp without time zone`, `DeletedAt`: `timestamp without time zone`, `ID`: `integer`, `Name`: `character varying`, `Type`: `character varying`, `UpdatedAt`: `timestamp without time zone`, `Value`: `text`}
	_                = bytes.MinRead
)

func testAttributesUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(attributePrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(attributeColumns) == len(attributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	if rowsAff, err := o.Update(tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAttributesSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(attributeColumns) == len(attributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Attribute{}
	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributeColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Attributes().Count(tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, attributeDBTypes, true, attributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(attributeColumns, attributePrimaryKeyColumns) {
		fields = attributeColumns
	} else {
		fields = strmangle.SetComplement(
			attributeColumns,
			attributePrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AttributeSlice{o}
	if rowsAff, err := slice.UpdateAll(tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAttributesUpsert(t *testing.T) {
	t.Parallel()

	if len(attributeColumns) == len(attributePrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Attribute{}
	if err = randomize.Struct(seed, &o, attributeDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	tx := MustTx(boil.Begin())
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Attribute: %s", err)
	}

	count, err := Attributes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, attributeDBTypes, false, attributePrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Attribute struct: %s", err)
	}

	if err = o.Upsert(tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Attribute: %s", err)
	}

	count, err = Attributes().Count(tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
